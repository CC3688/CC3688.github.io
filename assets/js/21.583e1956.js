(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{344:function(n,e,a){"use strict";a.r(e);var t=a(33),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"basic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic"}},[n._v("#")]),n._v(" basic")]),n._v(" "),a("h2",{attrs:{id:"vscode-自动编译-ts-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vscode-自动编译-ts-文件"}},[n._v("#")]),n._v(" vscode 自动编译 .ts 文件")]),n._v(" "),a("ol",[a("li",[n._v("在根目录下  运行"),a("code",[n._v("tsc --init")]),n._v("  生成配置文件")]),n._v(" "),a("li",[n._v("在配置文件 设置 outDir  编译后 js 文件的输出目录")]),n._v(" "),a("li",[n._v("点击vscode 菜单 > Terminal > Run Task > typescript > tsc:watch - tsconfig.json")])]),n._v(" "),a("p",[n._v("设置完成后就可以自动生成代码")]),n._v(" "),a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[n._v("#")]),n._v(" 数据类型")]),n._v(" "),a("p",[n._v("typescript 中为了使编写的代码更规范, 更有利于维护, 增加了类型校验")]),n._v(" "),a("p",[n._v("写 ts 代码必须指定类型")]),n._v(" "),a("ul",[a("li",[n._v("布尔类型 (boolean)")]),n._v(" "),a("li",[n._v("数字类型 (number)")]),n._v(" "),a("li",[n._v("字符串类型 (string)")]),n._v(" "),a("li",[n._v("数组类型 (array)")]),n._v(" "),a("li",[n._v("元组类型 (tuple)")]),n._v(" "),a("li",[n._v("枚举类型 (enum)")]),n._v(" "),a("li",[n._v("任意类型 (any)")]),n._v(" "),a("li",[n._v("null 和 undefined")]),n._v(" "),a("li",[n._v("void 类型")]),n._v(" "),a("li",[n._v("never 类型")])]),n._v(" "),a("h4",{attrs:{id:"布尔类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[n._v("#")]),n._v(" 布尔类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let flag: boolean = true\n\n// flag =  123   //错误\n\nflag = flase   // 正确\n\n")])])]),a("h4",{attrs:{id:"数值类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数值类型"}},[n._v("#")]),n._v(" 数值类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let num: number = 123\n\nnum = 456\n\n// num = 'str'  // 错误\n\n")])])]),a("h4",{attrs:{id:"字符串类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[n._v("#")]),n._v(" 字符串类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let str: string = 'this is ts'\n\nstr = 'haha'  //正确\n\n//str = true    //错误\n\n")])])]),a("h4",{attrs:{id:"数组类型-array-ts中定义数组有两种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组类型-array-ts中定义数组有两种方式"}},[n._v("#")]),n._v(" 数组类型(array)  ts中定义数组有两种方式")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 1 第一种定义数组的方式\nlet arr: number[] = [11,22,33]\n\n// 2 第二种定义数组的方式\nlet arr2: Array<number> = [11,22,33]\n\n")])])]),a("h4",{attrs:{id:"元组类型-tuple-属于数组的一种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元组类型-tuple-属于数组的一种"}},[n._v("#")]),n._v(" 元组类型(tuple)  属于数组的一种")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 可以给数组中的每个元素指定类型\n\nlet arr: [number, string] = [123, 'this is ts']\n")])])]),a("h4",{attrs:{id:"枚举类型-enum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型-enum"}},[n._v("#")]),n._v(" 枚举类型(enum)")]),n._v(" "),a("p",[n._v("在程序中用自然语言中相应含义的单词来代表某一状态,使程序容易阅读和理解,也就是说,事先考虑到某一个变量可能取的值, 尽量用自然语言中含义清楚的单词来表示它的每一个值. 这种方法称为枚举, 用这种方法的类型称枚举类型.")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// enum Flag { success, error}\nenum Flag { success = 1, error = 2}\n\nlet s: Flag = Flag.success\n\nconsole.log(s)   // 1\n\nenum Color { blue, red, 'orange'}  // 加不加引号 一样\nlet c: Color = Color.red\nconsole.log(c)   // 1\n\n//默认一项项的值是从0开始 递增 1   如果有赋值, 则后面的值由赋值后开始 递增 1\n")])])]),a("h4",{attrs:{id:"任意类型-any"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意类型-any"}},[n._v("#")]),n._v(" 任意类型(any)")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nlet num: any = 123\n\nnum = 'abc'\n\nnum = true\n\n// 使用\nlet oBox: any = document.getElementById('box')\n\noBox.style.color = 'red'\n\n")])])]),a("h4",{attrs:{id:"null-和-undefined-其它数据类型的子类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined-其它数据类型的子类型"}},[n._v("#")]),n._v(" null 和 undefined  其它数据类型的子类型")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// let num: number\n\n// console.log(num)     // 可以输出 undefined  报错\n\n\n\n// let num2: undefined\n// console.log(num2)   //输出 undefined  正确\n\nlet num: number | undefined\n\nnum = 123\n\nconsole.log(num)   // 123\n\n// 一个元素可能是number 类型, 可能是 null  可能是 undefined\n\nlet num: number|null|undefined\n\n")])])]),a("h4",{attrs:{id:"void类型-void表示没有任何类型-一般用于定义方法时-方法没有返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#void类型-void表示没有任何类型-一般用于定义方法时-方法没有返回值"}},[n._v("#")]),n._v(" void类型  void表示没有任何类型, 一般用于定义方法时, 方法没有返回值")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function run (): void {\n\n}\n \n")])])]),a("h4",{attrs:{id:"never-类型-是其他类型-包括-null-和-undefined的子类型-代表从不会出现的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#never-类型-是其他类型-包括-null-和-undefined的子类型-代表从不会出现的值"}},[n._v("#")]),n._v(" never 类型: 是其他类型, 包括 null 和 undefined的子类型, 代表从不会出现的值")]),n._v(" "),a("p",[n._v("意味着声明never的变量只能被never类型所赋值")]),n._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[n._v("#")]),n._v(" 函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 函数声明法\nfunction run():strng {\n\n  return 'run'\n}\n\n\n// 匿名函数\nconst fun = function(): number {\n\n  return 123\n}\n\n// 传参\nfunction getInfo(name: string, age: number): string {\n\n  return `${name} --- ${age}`\n}\n\n\n// 可选参数,  参数名 带 ? 就是可选参数,  可选参数 必须在位置参数后面z\nfunctionn getInfo(name: string, age?:number):string {\n\n}\n\n\n// 三点运算符,  剩余参数, 接受新参传过来的值\n\nfunction sum(a:number, b:number: ...result: number[]): number {\n  var sum = 0\n  for( var i = 0; i < result.lenghth; i++) {\n    sum += result[i]\n  }\n  return sum\n}\n\n// ts函数重载\n// java中方法的重载, 重载指的是两个或者两个以上同名函数, 但它们的参数不一样, 这里会出现函数重载的情况\n// typescript中的重载, 通过为同一个函数提供多个函数类型定义来试下多种功能的目的\n// ts为了兼容\n\n\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);