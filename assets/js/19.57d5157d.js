(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{336:function(e,t,a){"use strict";a.r(t);var s=a(33),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[e._v("#")]),e._v(" 基础")]),e._v(" "),a("h2",{attrs:{id:"开启项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开启项目"}},[e._v("#")]),e._v(" 开启项目")]),e._v(" "),a("h4",{attrs:{id:"安装django"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装django"}},[e._v("#")]),e._v(" 安装Django")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> pip3 install django\n")])])]),a("h4",{attrs:{id:"创建一个django-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个django-project"}},[e._v("#")]),e._v(" 创建一个django project")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> django-admin.py startproject mysite\n")])])]),a("p",[a("strong",[e._v("mysite目录结构")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("|-- mysite\n    |-- manage.py\n    |-- mysite            \n        |-- __init__.py\n        |-- settings.py\n        |-- urls.py\n        |-- wsgi.py\n")])])]),a("ul",[a("li",[e._v("里的mysite 与 外面的mysite 名字可以不相同,默认创建是相同的,里面的mysit是和整个项目相关的")]),e._v(" "),a("li",[e._v("manage.py :　Django项目里面的工具, 通过它可以调用django shell 和 数据库")]),e._v(" "),a("li",[e._v("settings.py :　包含了项目的默认设置,包括数据库信息,调试标志及其他一些工作变量")]),e._v(" "),a("li",[e._v("urls.py :　负责把url模式映射到应用程序\n1.15 06分")])]),e._v(" "),a("h4",{attrs:{id:"创建一个应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个应用"}},[e._v("#")]),e._v(" 创建一个应用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> python manage.py startapp blog\n\n|-- mysite\n    |-- blog\n        |-- migrations\n        |-- __init__.py\n        |-- admin.py\n        |-- apps.py\n        |-- models.py\n        |-- tests.py\n        |-- views.py\n    |-- manage.py\n    |-- mysite            \n        |-- __init__.py\n        |-- settings.py\n        |-- urls.py\n        |-- wsgi.py\n\n")])])]),a("ul",[a("li",[e._v("blog 文件是和应用相关的东西")]),e._v(" "),a("li",[e._v("models.py 模型")]),e._v(" "),a("li",[e._v("views.py 视图函数")])]),e._v(" "),a("h4",{attrs:{id:"新建视图文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新建视图文件夹"}},[e._v("#")]),e._v(" 新建视图文件夹")]),e._v(" "),a("p",[e._v("手动在根目录下创建一个 templates 文件夹, 根据应用再创建相应的文件夹")]),e._v(" "),a("p",[e._v("并在 项目 settings.py TEMPLATES.DIRS 下添加目录")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],                    \n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n")])])]),a("h4",{attrs:{id:"mtv"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mtv"}},[e._v("#")]),e._v(" MTV")]),e._v(" "),a("p",[e._v("http请求后, 由 项目的 urls.py 分配 视图函数 views,   views 或与models 联系, 然后, 调用 templates 下相应的模板")]),e._v(" "),a("h4",{attrs:{id:"启动项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动项目"}},[e._v("#")]),e._v(" 启动项目")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> python manage.py runserver 8888\n")])])]),a("ul",[a("li",[e._v("8888 是端口号, 不填,默认是8000")]),e._v(" "),a("li",[e._v("会默认生成一个 db.sqlite3  数据库存相关")])]),e._v(" "),a("h2",{attrs:{id:"静态文件配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态文件配置"}},[e._v("#")]),e._v(" 静态文件配置")]),e._v(" "),a("p",[e._v("在项目根目录 新建 static 文件夹 , 并找到 项目 settings.py")]),e._v(" "),a("p",[e._v("把路径添加上去")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 这个是原有的代码            这个是 将在模板引用时 的 url 如: /static/jQuery.js\nSTATIC_URL = \'/static/\'\n\n// 这个手动添加的代码\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, "static")    // "static" 新建的静态文件目录, 可以随便起名\n]\n\n//这样写,  STATIC_URL 这个不要动, \n// 实际目录,手动添加的可以随便动\n')])])]),a("h2",{attrs:{id:"路由控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由控制"}},[e._v("#")]),e._v(" 路由控制")]),e._v(" "),a("p",[e._v("在urlps.py 里配置路由,  2.0 支持 path写法, 也支持 1.0的re_path写法")]),e._v(" "),a("h4",{attrs:{id:"简单的路由配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单的路由配置"}},[e._v("#")]),e._v(" 简单的路由配置")]),e._v(" "),a("p",[e._v("urls.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('timer/', views.timer),\n\n    # 路由配置:　　路径　　－－－－－－－＞　视图函数\n    # 从上到下 匹配, 如果匹配了就不往下走了\n    re_path(r'^articles/2003/$', views.specical_case_2003),\n    # 这里正则匹配上了,就调用,后面的函数,并传一个请求对象做参数request,\n    # 它有所有的请求信息, 一定要写,不管你用不用\n     re_path(r'^articles/([0-9]{4})/$', views.year_archive),\n     # 括号正则分组, 匹配到时, 会把它 作为request之后的第二个参数传入\n     # 位置参数,你可以自已随便用个参数接收它\n     re_path(r'^articles/([0-9]{4})/([0-9]{2})/$', views.month_archive),\n     \n     # 要从url中捕获一个值, 只需要在它周围放置一对圆括号\n     # 不需要添加一个前导反斜杠\n     # 每个正则表达式前面的'r' 是可选的, 建议加上\n]\n")])])]),a("p",[e._v("views.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from django.shortcuts import render, HttpResponse\n\ndef specical_case_2003(request):\n\n    return HttpResponse(\"111\")\n\ndef year_archive(request, year):\n\n    return HttpResponse(year)\n\ndef month_archive(request, year, month):\n\n    return HttpResponse(year + '--' + month)\n")])])]),a("h4",{attrs:{id:"有名分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有名分组"}},[e._v("#")]),e._v(" 有名分组")]),e._v(" "),a("p",[e._v("上面的 分组是没有名字的, 靠位置参数 获得值,也可以给它起个命名")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# urls.py\nre_path(r'^articles/(?P<y>[0-9]{4})/(?P<m>[0-9]{2})/$', views.month_archive),\n\n# views.py\ndef month_archive(request, y, m):\n    # 这里就必须用 y, m 来接收了, 因为它是关键字传参, 谁先谁后就无所谓了\n    # y, m 数据类型  是字符串,   \n    # urls 传过来的都是字符串, 如果想要像数字那样去处理 需要转类型, path定义的urls则解决这个问题\n    return HttpResponse(year)\n")])])]),a("h4",{attrs:{id:"路由分发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由分发"}},[e._v("#")]),e._v(" 路由分发")]),e._v(" "),a("p",[e._v("路由应该 每个应用写一个urls.py  然后, 由项目的urls.py 去做分发")]),e._v(" "),a("p",[e._v("可以在每个应用 下创建一个 urls.py")]),e._v(" "),a("p",[e._v("blog 应用下创建 urls.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from django.contrib import admin\nfrom django.urls import path, re_path\nfrom blog import views\n\nurlpatterns = [\n    re_path(r'^articles/2003/$', views.specical_case_2003),\n    re_path(r'^articles/([0-9]{4})/$', views.year_archive),\n    re_path(r'^articles/(?P<y>[0-9]{4})/(?P<m>[0-9]{2})/$', views.month_archive),\n]\n")])])]),a("p",[e._v("在项目urls.py下做分发")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from django.contrib import admin\nfrom django.urls import path, re_path, include\n\n\n# 需要先引入include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n\n    # 分发:\n    re_path(r'blog/', include(\"blog.urls\")),\n    # re_path(r'^', include(\"blog.urls\")),  这样也可以的,这各之前写的没分发一样了\n]\n")])])]),a("p",[e._v("现在是这样访问:　http://localhost:8080/blog/articles/2076/80/\n当匹配到 blog 就被分发到 blog下的 urls 下去处理剩下的路由(articles/2076/80/)")]),e._v(" "),a("h4",{attrs:{id:"密码登录示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#密码登录示例"}},[e._v("#")]),e._v(" 密码登录示例")]),e._v(" "),a("p",[e._v("注意先关闭一下 csrf   在项目 设置里的 中间件字段")]),e._v(" "),a("p",[e._v("url.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("re_path(r'^login/$', views.login)\n\n")])])]),a("p",[e._v("前端html")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    // action 不写,就表示 提交到当前也  \n    // 如果以 / 开头,则是 表示当前域名加端口后, 再加上之后的路径\n    <form action="http://127.0.0.1:8000/blog/login/" method="POST">\n        用户名 <input type="text" name="user">\n        密码 <input type="password" name="pwd">\n        <input type="submit" value="submit">\n    </form>\n')])])]),a("p",[e._v("views.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def login(request):\n    // 通过 请求方法的判断  然后 做出不同的响应\n    if request.method == 'GET':\n        return render(request, 'blog/login.html')\n    \n    else: \n        user = request.POST.get('user')\n        pwd = request.POST.get('pwd')\n\n        if user == 'yycu' and pwd == '123456':\n            return HttpResponse(\"登录成功\")\n        else:\n            return HttpResponse(\"密码或账号错误\")\n")])])]),a("h4",{attrs:{id:"路由反向解析-命名路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由反向解析-命名路由"}},[e._v("#")]),e._v(" 路由反向解析  --  命名路由")]),e._v(" "),a("p",[e._v("路由是一个可能随时被改的东西, 一但改了,其它地方也得改, 相当麻烦.\n可以在定义路由是传入一个关键字参灵敏 name='yourURLname'")]),e._v(" "),a("p",[e._v("urls.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("re_path(r'^login/$', views.login, name='login'),\n\n")])])]),a("p",[e._v("html这样用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" <form action=\"{% url 'login' %}\" method=\"POST\">\n\n //这里为什么样呢?\n // 因为在 渲染这个页面时, render时, {% url 'login' %}  模板语法,会被解析为相应的url\n // 它会先在 项目里的 urls.py 里找 ,然后找不到 再到 应用里的找\n")])])]),a("p",[e._v("在视图函数使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from django.urls import reverse\n\ndef viewFunction(request):\n\n    url = reverse('url_name')\n    // 拿到后,就可以使用了\n    // 如果解析出来,含有 正则表达式, 可以第二个参数去替换,不然后报找不到\n    // url = reverse('year', args=(2003,))      \n    // 元组中有一个元素的写法是(元素,),  不然会被当做 (元素)  就不是元组了\n")])])]),a("h4",{attrs:{id:"路由名称空间-命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由名称空间-命名空间"}},[e._v("#")]),e._v(" 路由名称空间(命名空间)")]),e._v(" "),a("p",[e._v("多个应用, 对路由进行命名, 很大概率会出现重复命名的情况, 发生覆盖现象.")]),e._v(" "),a("p",[e._v("可以用名称空间来解决, 在路由分发时使用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 在项目urls.py 引入各应用urls.py 时, 通过关键字参数 namespace 指定一个命名空间\n// re_path(r\'blog/\', include(("blog.urls", "namespace"))),   要用元组来传\nre_path(r\'blog/\', include(("blog.urls", "blog"))),\n\n')])])]),a("p",[e._v("开启了名称空间后,  以后 reverse 时 需要这样")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("reverse('namespace:name')        // 注意语法 :\nreverse('blog:name')   \n")])])]),a("h4",{attrs:{id:"path-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-方法"}},[e._v("#")]),e._v(" path 方法")]),e._v(" "),a("p",[e._v("django2.0 新增的path 方法")]),e._v(" "),a("ul",[a("li",[e._v('原先1.0版本的, re_path  传过来的路由参数, 都是字符串,即使 是数字,其实也是 "11123" 其实也是一个数字字符串')]),e._v(" "),a("li",[e._v("正则有可以能重复也同样的正则多次")])]),e._v(" "),a("p",[e._v("path 方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("urlpatterns = [\n    path('articles/2003/', views.special_case_2003),\n    path('articles/<int:year>/', views.year_archive),\n    path('articles/<int:year>/<int:month>', views.special_case_2003),\n    path('articles/<int:year>/<int:month>/<slug>', views.article_detail),\n]\n// 使用 <>    从url 中捕获值\n// 这里的int 是django 提供的一个转化器类型, 没写就是得到的是字符串\n// : 后时 参数名,  没有用int: 则<argname>   <>里的内容 是参数名\n// 转换器有:\n// str     捕获的都是 字符串   默认的\n// int     匹配正整数, 包含0\n// slug    匹配字母,数字及横杠,下划线组成的字符串\n// uuid    匹配格式化的uuid 如: 075194d3-6775-478e-a8a8-6c931e288f00\n// path    匹配任何非空字符串, 包含了路径分隔符    \n")])])]),a("p",[e._v("自定义转换器")]),e._v(" "),a("p",[e._v("// 在 app/urlconver.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MonConvert: \n\n    regex = \"[0-9]{2}\"   // 固定属性, 一定要这样的属性\n\n    def to_python(self, value):\n        return int(value)\n    \n    def to_url(self, value):    # 反向解析\n        return '%04d' % value\n")])])]),a("p",[e._v("使用转换器")]),e._v(" "),a("p",[e._v("在项目的 urls.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from django.urls import register_converter    //需要引入转换器注册函数\nfrom app.urlconver import MonConvert\n\n// 先注册                         别名是必须的\nregister_converter(MonConvert, '起个别名方便使用k:mm')\n\n path('articles/<mm:month>/', views.month_archive),\n")])])]),a("p",[e._v("**django1.0版本都是用 url来定义了, 只要把re_path换成url  其它都是一样的")]),e._v(" "),a("h2",{attrs:{id:"视图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[e._v("#")]),e._v(" 视图")]),e._v(" "),a("p",[e._v("一个视图函数, 简称视图,是一个简单的python函数,它接受web请求并返回web响应. 它一定要有一个返回值.")]),e._v(" "),a("h4",{attrs:{id:"request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request"}},[e._v("#")]),e._v(" request")]),e._v(" "),a("ul",[a("li",[e._v("request.method  请求方式")]),e._v(" "),a("li",[e._v("request.GET     get请求的数据   是一个字典   通过 get('key')  取值")]),e._v(" "),a("li",[e._v("request.POST    post请求的数据  是一个字典   通过 get('key')  取值")]),e._v(" "),a("li",[e._v("request.path    路径,  不包含 协议,域名,端口号,数据")]),e._v(" "),a("li",[e._v("request.get_full_path() 路径和数据  不包含 协议,域名,端口号")])]),e._v(" "),a("p",[e._v("还有很多.....")]),e._v(" "),a("h4",{attrs:{id:"respone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#respone"}},[e._v("#")]),e._v(" respone")]),e._v(" "),a("p",[e._v("视图函数,返回的 就是response")]),e._v(" "),a("ul",[a("li",[e._v("return HttpResponse('字符串')")]),e._v(" "),a("li",[e._v("return render(request, 'html文件', [数据]); 数据是一个字典")])]),e._v(" "),a("h2",{attrs:{id:"模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[e._v("#")]),e._v(" 模板")]),e._v(" "),a("h4",{attrs:{id:"模板语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板语法"}},[e._v("#")]),e._v(" 模板语法")]),e._v(" "),a("p",[e._v("templates 目录下的就是模板, 含 html 和 模板语法")]),e._v(" "),a("p",[a("strong",[e._v("两个模板语法")])]),e._v(" "),a("ul",[a("li",[e._v(e._s()+"    两个大括号是渲染表量用的\n"),a("ul",[a("li",[e._v("1 深度查询    句点符")]),e._v(" "),a("li",[e._v("2 过滤器")])])]),e._v(" "),a("li",[e._v("{% %}    渲染标签用的")])]),e._v(" "),a("p",[e._v("views.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def index(request):\n\n    name = '陈俊武'\n    i = 10\n    l = [11, 22, 33]\n    info = {\"name\": \"yycu3688\", \"age\": 22}\n    b = True\n    class Person(object):\n        def __init__(self, name, age):\n            self.name = name\n            self.age = age\n    cc = Person(\"cc\", 333)\n    cjw = Person(\"cjw\", 444)\n\n    person_list = [cc, cjw]\n\n\n    return render(request, 'index.html', {'name': name, 'i': i, 'l': l, 'info': info, 'cc': cc, 'cjw': cjw, 'person_list': person_list})\n\n    # 这种写法太累了\n    # return render(request, 'index.html', locals())  locals会把变量,和上面的一样传递守去\n\n")])])]),a("p",[e._v("index.html")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n    <h2>index.html</h2>\n    <p>名字: {{ name }}</p>\n    <p>{{i}}</p>\n    <p>{{info}}</p>\n   \n     <h2>深度查询</h2>\n     <p>{{cc.name}}</p>\n     <p>{{person_list.1.age}}</p>\n\n     # 起别名\n     {% with person_list.1.age as age %}\n     接下来 ane 就是 等于 person_list.1.age\n\n")])])]),a("h4",{attrs:{id:"过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[e._v("#")]),e._v(" 过滤器")]),e._v(" "),a("p",[e._v("语法:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{{ obj | filter_name: param }}\n")])])]),a("h4",{attrs:{id:"标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[e._v("#")]),e._v(" 标签")]),e._v(" "),a("p",[e._v("在模板 html")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 循环    和python for 循环一样   \n{% for i in l %}\n    <p>{{ i }}</p>\n{% endfor %}\n\n# 循环 计数器  django 模板语法提供的 从 1  开始\n{% for i in l %}\n    <p>{{ forloop.counter }}</p>   // 从 1  开始\n    <p>{{ forloop.counter0 }}</p>  // 从 0 开始\n{% endfor %}\n\n\n# django 提供一个empty\n{% for i in l %}\n    <p>{{ forloop.counter }}</p>   // 从 1  开始\n    <p>{{ forloop.counter0 }}</p>  // 从 0 开始\n{% empty %}\n<p>列表为空</p>\n{% endfor %}\n\n\n# if 条件语句\n\n{% if user %}\n<p>\n    CC3688你好\n</p>\n{% else %}\n<p>\n    登录\n</p>\n\n{% endif %}\n\n# scsf\n\n表单提交时时要在 form 内添加上下面这句:\n\n{% csrf_token %}     # 会生成一个默认 的隐藏的表单域\n\n\n")])])]),a("h4",{attrs:{id:"自定义标签-和-过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义标签-和-过滤器"}},[e._v("#")]),e._v(" 自定义标签 和 过滤器")]),e._v(" "),a("p",[e._v("1 在settings中的installed_apps 配置当前app, 不然django无法找到自定义的标签")]),e._v(" "),a("p",[e._v("2 在app中创建templatetags模块(模块名只能是templatetags)    # 名字不能换, django 认死的,  模块就一个文件件,带__init__.py")]),e._v(" "),a("p",[e._v("3 创建任意.py文件, 如 my_tags_filter.py")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from django import template   # 固定写法\n\nregister = template.Library() # 固定写法\n\n@register.filter              # 固定写法\ndef multi_fliter(x, y):       # 自定义一个过滤器  过滤器,最多只能定义两个形参, 因为它的调用形式决定了\n    return x*y\n\n\n@register.simple_tag          # 自定义标签  形参个数无限\ndef multi_tag(x, y):\n    return x*y\n\n")])])]),a("p",[e._v("4 使用时需要先引入")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{% load my_tags_filter %}\n<p>{{i | multi_filter}}\n\n\n<p>{% multi_tag 7 9 %}</p>\n")])])]),a("h4",{attrs:{id:"模板继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板继承"}},[e._v("#")]),e._v(" 模板继承")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# base.html\n\n{% block title %}\n<title>orders</title>\n{% endblock title%}\n\n{% block con %}     # 留坑\n{{ block.super }}   # 会把父类的内容也留下, 而不是只被覆盖  即子类继承时, <h4>订单</h4> 也会被保留\n<h4>订单</h4>\n{% endblock con%}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n{% include 'advertise.html' %}     # 引入 html  include 只是引入, 没有像继承那有坑可填\n\n\n")])])]),a("p",[e._v("继承模板")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{% extends 'base.html %}\n\n{% block con  %}\n    填坑\n{%  endblock  %}\n\n")])])]),a("h2",{attrs:{id:"orm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm"}},[e._v("#")]),e._v(" ORM")]),e._v(" "),a("p",[e._v("ORM 实现了数据模型与数据库的解藕, 即数据模型的设计不需要依赖于特定的数据库,\n通过简单的配置就可以轻松更换数据库\nORM 是 对象 - 关系 - 映射   的简称")]),e._v(" "),a("p",[e._v("有的需要安装 下列的依赖\n不同版本可能会遇到不到的问题")]),e._v(" "),a("p",[e._v("pipenv install mysqlclient")]),e._v(" "),a("ol",[a("li",[e._v("定义表    在models.py 文件定义")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("from django.db import models\n\n# Create your models here.\nclass Book(models.Model):\n    id = models.AutoField(primary_key=True)\n    title = models.CharField(max_length=32)\n    pub_date = models.DateField()\n    price = models.DecimalField(max_digits=8, decimal_places=2)\n    publish = models.CharField(max_length=32)\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("设置 数据相关的 在settings.py 设置")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'db',\n        'USER': 'yycu',\n        'PASSWORD': '001001001',\n        'HOST': '127.0.0.1',\n        'PORT': 3306\n    }\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("设置 logging 非必须 在settings.py 设置")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n   'loggers': {\n        'django.db.backends': {\n            'handlers': ['console'],\n            'propagate': True,\n        }\n   }\n}\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("生成迁移文件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(">python manage.py makemigrations\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[e._v("迁移")])]),e._v(" "),a("p",[e._v("生成表")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("> python manage.py migrate\n")])])]),a("h2",{attrs:{id:"表的基础操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表的基础操作"}},[e._v("#")]),e._v(" 表的基础操作")]),e._v(" "),a("h4",{attrs:{id:"表添加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表添加"}},[e._v("#")]),e._v(" 表添加")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('from django.shortcuts import render, HttpResponse\n\nfrom app.models import Book      # 引入模型类\n\ndef index(request):\n\n    # 添加表记录\n\n    # 方式 1\n    ook_obj = Book(id=1, title="python红宝书", price=100, pub_date="2012-12-12", publish="人民出版社")\n    book_obj.save()\n\n    # 方式 2 不用 save  create 返回值是录前生成记录的对象\n    book_obj = Book.objects.create(title="php", price=100, pub_date="2012-12-12", publish="人民出版社")\n\n    return HttpResponse("ok")\n')])])]),a("h4",{attrs:{id:"表查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表查询"}},[e._v("#")]),e._v(" 表查询")]),e._v(" "),a("p",[e._v("和上面一样的代码这里没有写出来")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    # 查询   \n    # 1 方法的返回值\n    # 2 方法的调用者   objects 是管理器\n    \n    # all 方法  调用者是 objects 返回值 是一个 queryset 对象\n    book_list = Book.objects.all()   # [obj1, obj2, ...]\n\n    print(book_list)\n\n    for obj in book_list:\n        print(obj.title, obj.price)\n\n    # first, last  调用者是queryset,  返值是 model对象\n    book = Book.objects.all().first()\n    # book = Book.objects.all()[0]\n\n\n    # filter()  调用者是 objects 返回值 是一个 queryset 对象\n\n    book_list = Book.objects.filter(price=100)  # [obj1, obj2, ...]\n                                        # 它是一个queryset 所以可以调用 first, last\n    book_list = Book.objects.filter(price=100, title=\"go\")  \n    # get  有且只有一个查询结果时才有意义, 即查出多条结果或没结果,报错.\n    #      只能有且只有一条结果\n    #      返回值是一个 model 对象\n    book_obj = Book.objects.get(title=\"go\")\n\n    # exclude 调用者是objects 返回值 是一个queryset对象\n    #         除了 title='go' 的值都返回来, 即是filer取反\n    #         排除条件过滤\n    ret = Book.objects.exclude(title=\"go\")\n   \n\n    # order_by  调用者是queryset对象, 返回一个queryset对象\n    Book.objects.all().order_by('-id')          # - 降序\n    Book.objects.all().order_by('price', 'id')  # 可以按多个排序\n\n\n    # reverse  反序\n\n\n    # count() 调用者是queryset对象, 返回一个 int\n    ret = Book.objects.all().count()\n\n\n    # exist()\n\n    ret = Book.objects.all()# 通这个,虽然可以判断,有没有记录但不好,它会把所有记录了出来\n    ret = Book.objects.all().exists()  # 取一条, 快,省\n    if ret:\n        print(\"ok\")\n\n    # values 方法 调用者是queryset对象, 返回一个queryset\n    #         但它里面不是一个个对象了,而是一个个字典了,\n    #         values 里可以传多个字段\n\n    ret =  Book.objects.all().values('price')\n\n    # values_list 方法, 调用者 queryset 对象, 返回值 queryset 对象\n    #           但它里面不是一个个对象了,而是一个个元组了,     \n    #           values_list 里可以传多个字段\n\n    ret =  Book.objects.all().values_list('price', 'title')\n\n    # distinct\n\n    ret = Book.objects.all().distinct()  # 没意义,不要这样用\n    ret = Book.objects.all().values('price').distinct()  \n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);