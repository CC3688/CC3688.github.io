(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{359:function(e,a,n){"use strict";n.r(a);var s=n(33),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"webpack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),n("h2",{attrs:{id:"js模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js模块化"}},[e._v("#")]),e._v(" JS模块化")]),e._v(" "),n("h3",{attrs:{id:"命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[e._v("#")]),e._v(" 命名空间")]),e._v(" "),n("p",[e._v("库名.类别名.方法名")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const NameSpace = {}   // 一个命名空间\n\n//如果被定义就用原来的,如果没有就用 {} 避免被重复覆盖\nNameSpace.type = NameSpace.type || {}      // type 命名空间\n\nNameSpace.type.method = function() {     // type 命名空间的 方法\n\n}\n")])])]),n("p",[e._v("不足: 名字长, 使用需要 点点点   (object . 语法)")]),e._v(" "),n("h3",{attrs:{id:"commonjs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[e._v("#")]),e._v(" commonjs")]),e._v(" "),n("p",[e._v("一个文件为一个模块")]),e._v(" "),n("p",[e._v("通过 module.exports 暴露模块接口")]),e._v(" "),n("p",[e._v("通过 require 引入模块")]),e._v(" "),n("p",[e._v("同步执行")]),e._v(" "),n("h3",{attrs:{id:"amd-cmd-umd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#amd-cmd-umd"}},[e._v("#")]),e._v(" AMD/CMD/UMD")]),e._v(" "),n("h4",{attrs:{id:"amd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#amd"}},[e._v("#")]),e._v(" AMD")]),e._v(" "),n("p",[e._v("Async Module Definition")]),e._v(" "),n("p",[e._v("使用 define 定义模块")]),e._v(" "),n("p",[e._v("使用 require 加载模块")]),e._v(" "),n("p",[e._v("RequireJS (代表库)")]),e._v(" "),n("p",[e._v("依赖前置, 提前执行")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('define(\n  "alpha", //模块名 可省略\n  ["require", "exports", "beta"], //依赖\n  function(require, exports, beta) {   \n    //参数声明的模块,有没有用到,都会提前执行, 参数的模块与上面依赖声明的模块一一对应\n    exports.verb = function(){  // 模块输出\n      return beta.verb()\n    }\n  }\n)\n')])])]),n("h4",{attrs:{id:"cmd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),n("p",[e._v("common module definition")]),e._v(" "),n("p",[e._v("一个文件为一个模块")]),e._v(" "),n("p",[e._v("使用 define 来定义一个模块")]),e._v(" "),n("p",[e._v("使用 require 来加载一个模块")]),e._v(" "),n("p",[e._v("SeaJS(代表库)")]),e._v(" "),n("p",[e._v("特点, 尽可能懒执行, 这也是 和 AMD的最大不同, AMD把所有的依赖前置了,先执行了依赖的代码.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 所有模块 都通过 define 来定义\ndefine(function(require, exports, module){\n  // 通过 require 引入依赖\n  var $ = require('jquery');\n  var Spinnig = require('./spinnig);\n\n  // 通过 exports 对外提供接口\n  exports.doSometing = ...\n\n  // 或者通过 module.exports 提供整个接口\n  module.exports = ...\n\n  //exports =  ...  不能这样做, 会覆盖掉这个参数\n});\n\n")])])]),n("h4",{attrs:{id:"umd"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#umd"}},[e._v("#")]),e._v(" UMD")]),e._v(" "),n("p",[e._v("universal module definition")]),e._v(" "),n("p",[e._v("通用解决方案")]),e._v(" "),n("p",[e._v("三个步奏:")]),e._v(" "),n("p",[e._v("1 判断是否支持 AMD")]),e._v(" "),n("p",[e._v("2 判断是否支持 commonJS")]),e._v(" "),n("p",[e._v("3 如果都没有  使用全局变量")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(function(root, factory){\n\n  if(type define === 'function' && define.amd) {\n\n    define([], factory);\n\n  } else if(typeof exports === 'object') {\n\n    module.exports = factory()\n\n  } else {\n\n    root.returnExprots = factory()\n\n  }\n})(this, function(){\n\n  return {}\n})\n\n\n")])])]),n("h3",{attrs:{id:"es6-module-esm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6-module-esm"}},[e._v("#")]),e._v(" ES6 module   / ESM")]),e._v(" "),n("p",[e._v("EcmaScript Module\n一个文件 一个模块\nexport 暴露\nimport 引用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 引入\nimport theDefault, { named1, named2 } from 'src/mylib'\nimport theDefault from 'src/mylib'\nimport { named1, named2 } from 'src/mylib'\n\n// 引入并重命名\nimport { named1 as myNamed1, named2 } from 'src/mylib'\n\n// 引入所有属性 到一个 object  下方可通赤 mylib.xx 使用\nimport * as mylib from 'src/mylib\n\n// 只加载模块, 不引入,   一般用来引入 css 文件\nimport 'src/mylib'\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export var myVar1 = ''\nexport let myVar2 = ''\nexport const MY_CONST = ''\n\nexport function myFunc() {}\nexport function* myGeneratorFunc() {}\nexport class MyClass {}\n\n\n// export default 只能有一个, 下面展示是示例可以有这样的导出而已\nexport default 134\n\nexport default function(x) {\n  return x\n}\n\nexport defualt x => x\n\nexportd default class {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n\n// 也可以先定义 声明  export 出去\nconst MY_CONST = ''\nfunction myFunc() {}\n// 下面只是展示, 只能 导出  一个 {}   覆盖\nexport { MY_CONST, myFunc }\nexport { MY_CONST as THE_CONST, myFunc as tearFunc }\n// 引入其它模块并在此模块导出\nexport * from 'src/other_module\nexport { foo, bar } from 'src/other_module\nexport { foo as myFoo, bar } from 'src/other_module'\n")])])]),n("h2",{attrs:{id:"css-模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#css-模块化"}},[e._v("#")]),e._v(" CSS 模块化")]),e._v(" "),n("p",[e._v("css模块化 也就是css规范")]),e._v(" "),n("p",[e._v("BEM 是众多规范的一种")]),e._v(" "),n("p",[n("code",[e._v("块（block）、元素（element）、修饰符（modifier），由 Yandex 团队提出的一种前端 CSS 命名方法论。")])]),e._v(" "),n("p",[e._v("- 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。")]),e._v(" "),n("p",[e._v("__ 双下划线：双下划线用来连接块和块的子元素")]),e._v(" "),n("p",[e._v("_ 单下划线：单下划线用来描述一个块或者块的子元素的一种状态")]),e._v(" "),n("p",[e._v("命名约定的模式是：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".block {}\n\n.block__element {}\n\n.block--modifier {}\n")])])]),n("p",[e._v("每一个块(block)名应该有一个命名空间（前缀）")]),e._v(" "),n("ul",[n("li",[e._v("block 代表了更高级别的抽象或组件。")]),e._v(" "),n("li",[e._v("block__element 代表 .block 的后代，用于形成一个完整的 .block 的整体。")]),e._v(" "),n("li",[e._v("block--modifier 代表 .block 的不同状态或不同版本。使用两个连字符和下划线而不是一个，是为了让你自己的块可以用单个连字符来界定")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div class="article">\n    <div class="article__body">\n        <div class="tag"></div>\n        <button class="article__button--primary"></button>\n        <button class="article__button--success"></button>\n    </div>\n</div>\n\n')])])]),n("p",[e._v("什么时候使用BEM ?")]),e._v(" "),n("ul",[n("li",[e._v("使用 BEM 的诀窍是，你要知道什么时候哪些东西是应该写成 BEM 格式的。")]),e._v(" "),n("li",[e._v("并不是每个地方都应该使用 BEM 命名方式。当需要明确关联性的模块关系时，应当使用 BEM 格式。")]),e._v(" "),n("li",[e._v("比如只是一条公共的单独的样式，就没有使用 BEM 格式的意义")])]),e._v(" "),n("p",[e._v("BEM的不足就是会让名字长, 在less可以这样, 书写还是蛮方便的")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(".article {\n    max-width: 1200px;\n    &__body {\n        padding: 20px;\n    }\n    &__button {\n        padding: 5px 8px;\n        &--primary {background: blue;}\n        &--success {background: green;}\n    }\n}\n\n")])])]),n("h2",{attrs:{id:"核心概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[e._v("#")]),e._v(" 核心概念")]),e._v(" "),n("h3",{attrs:{id:"entry"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entry"}},[e._v("#")]),e._v(" Entry")]),e._v(" "),n("p",[e._v("代码的入口,  也是打包的入口,  从入口进入,找依赖及找依赖的依赖. entry可以是一个入口,也可以是多个.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 三种入口的写法, 第三种比较好, 可以为打包后的文件起名字, key可以为chunk值\n// 值为 一个可以找的文件的地址就可以\nmodule.exports = {\n  entry: 'index.js'\n  entry: ['index.js', 'vendor.js']\n  entry: {\n    index: 'index.js'\n  }\n}\n")])])]),n("h3",{attrs:{id:"output"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[e._v("#")]),e._v(" Output")]),e._v(" "),n("p",[e._v("打包生成的文件 bundle")]),e._v(" "),n("p",[e._v("可以是一个或多个")]),e._v(" "),n("p",[e._v("可以自定义规则")]),e._v(" "),n("p",[e._v("配置要和entry对应")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = {\n  entry: 'index.js',\n  output: {\n    filename: 'index.mini.js'\n  }\n  entry: {\n    index: 'index.js',\n    vendor: 'vendor.js'\n  },\n  output: {    // name就是entry的key值\n    filename: '[name].min.[hash:5].js'\n  }\n}\n")])])]),n("h3",{attrs:{id:"loaders"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#loaders"}},[e._v("#")]),e._v(" Loaders")]),e._v(" "),n("p",[e._v("处理文件")]),e._v(" "),n("p",[e._v("转化为模块")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,   // 正则\n        use: 'css-loader' // 使用的loader\n      }\n    ]\n  }\n}\n")])])]),n("h3",{attrs:{id:"plugins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[e._v("#")]),e._v(" Plugins")]),e._v(" "),n("p",[e._v("参与打包整个过程")]),e._v(" "),n("p",[e._v("打包优化和压缩")]),e._v(" "),n("p",[e._v("配置编译时的变量")]),e._v(" "),n("p",[e._v("极其灵活")]),e._v(" "),n("p",[e._v("常用的Plugins:")]),e._v(" "),n("ul",[n("li",[e._v("优化相关")])]),e._v(" "),n("blockquote",[n("p",[e._v("CommonsChunkPlugin")]),e._v(" "),n("p",[e._v("UglifyjsWebpackPlugin")])]),e._v(" "),n("ul",[n("li",[e._v("功能相关")])]),e._v(" "),n("blockquote",[n("p",[e._v("ExtractTextWebpackPlugin")]),e._v(" "),n("p",[e._v("HtmlWebpackPlugin")]),e._v(" "),n("p",[e._v("HotModuleReplacementPlugin")]),e._v(" "),n("p",[e._v("CopyWebpackPlugin")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const webpack = require('webpack')\n\nmodule.exports = {\n  // 是一个数组, 可以使用多个\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin()\n  ]\n}\n\n")])])]),n("p",[n("strong",[e._v("常见名词")]),e._v("\nChunk 代码块\nBundle 一束一捆, 被打包后的代码\nModule 模块,通过loader处理后就是模块")]),e._v(" "),n("h2",{attrs:{id:"编译-es6-7"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译-es6-7"}},[e._v("#")]),e._v(" 编译 ES6/7")]),e._v(" "),n("p",[e._v("babel-loader (babel.io 官网   https://www.babeljs.cn/ 中文官网)")]),e._v(" "),n("p",[n("strong",[e._v("安装")])]),e._v(" "),n("p",[n("code",[e._v("npm install --save-dev babel-loader @babel/core")])]),e._v(" "),n("p",[n("strong",[e._v("babel presets")])]),e._v(" "),n("p",[e._v("babel presets 是规范的总结, 有:\nes2015"),n("br"),e._v("\nes2016"),n("br"),e._v("\nes2017"),n("br"),e._v("\nenv(常用)"),n("br"),e._v("\nbabel-preset-react\nbabel-preset-state 0-3 (未发布的总结)")]),e._v(" "),n("p",[n("strong",[e._v("安装")])]),e._v(" "),n("p",[n("code",[e._v("npm install --save-dev @babel/preset-env")])]),e._v(" "),n("p",[n("strong",[e._v("babel polyfill")])]),e._v(" "),n("p",[e._v("全局垫片 (使各种浏览器环境一致/api一致)\n会污染全局")]),e._v(" "),n("p",[e._v("为应用准备的(就是我们自己开发的应用, 不是为了开发框架,如vue 准备的)")]),e._v(" "),n("p",[n("code",[e._v("npm install --save babel-polyfill")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//使用\nimport 'babel-polyfill'\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 在webpack.config.js 里的 module 里配置\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        //use: 'babel-loader',\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              [\n                '@babel/preset-env', \n                {\n                  targets: {\n                    browsers: ['>1%', 'last 2 versions']\n                  }\n                }\n              ]\n            ]\n          }\n        },\n        exclude: '/node_modules/'\n      }\n    ]\n  }\n")])])]),n("p",[n("strong",[e._v("babel runtime transform")])]),e._v(" "),n("p",[e._v("局部垫片")]),e._v(" "),n("p",[e._v("为开发框架准备")]),e._v(" "),n("p",[e._v("不污染全局")]),e._v(" "),n("p",[n("code",[e._v("npm install --save-dev @babel/plugin-transform-runtime")])]),e._v(" "),n("p",[n("code",[e._v("npm install --save @babel/runtime")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 使用  配置   要 创建 一个babel的配置文件   .babelrc\n{\n  "presets": [\n    [\n      "@babel/preset-env", \n      {\n        "targets": {\n          "browsers": [">1%", "last 2 versions"]\n        }\n      }\n    ]\n  ],\n  "plugins": ["@babel/transform-runtime"]\n}\n')])])]),n("h2",{attrs:{id:"编译-typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编译-typescript"}},[e._v("#")]),e._v(" 编译 typescript")]),e._v(" "),n("p",[e._v("typscript 是微软出品的 Javascript的超集")]),e._v(" "),n("p",[n("strong",[e._v("安装")])]),e._v(" "),n("p",[n("code",[e._v("npm i -D typescript ts-loader")])]),e._v(" "),n("p",[n("code",[e._v("npm i -D typescript awesome-typescript-loader //第三方法的")])]),e._v(" "),n("p",[n("strong",[e._v("配置")]),e._v(" 文件")]),e._v(" "),n("p",[e._v('tsconfig.json\n\'\'\'\n{\n"compilerOptions": {\n"module": "commonjs",\n"target": "es5",\n"allowJs": true,\n"typeRoots": [\n"./node_modules/@types",\n"./typings/modules"\n]\n},\n"include": [\n"./src/*"\n],\n"exclude": [\n"./node_modules"\n]\n}\n\'\'\'')]),e._v(" "),n("p",[e._v("webpack.config.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = {\n  mode: 'development',\n  entry: {\n    'app': './src/app.ts'\n  },\n  output: {\n    filename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: {\n          loader: 'ts-loader'\n        }\n      }\n    ]\n  }\n}\n")])])]),n("p",[n("strong",[e._v("声明文件")])]),e._v(" "),n("p",[n("code",[e._v("npm i -S @types/lodash")])]),e._v(" "),n("p",[n("code",[e._v("npm i -S install @types/vue")]),e._v("\n这种需要自己去 安装 需要的 类库")]),e._v(" "),n("p",[n("strong",[e._v("Typings")])]),e._v(" "),n("p",[e._v("全局安装, 可以多一个typings")]),e._v(" "),n("p",[n("code",[e._v("npm i -g typings")])]),e._v(" "),n("p",[n("code",[e._v("typings install lodash")])]),e._v(" "),n("h2",{attrs:{id:"提取公共代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#提取公共代码"}},[e._v("#")]),e._v(" 提取公共代码")]),e._v(" "),n("p",[e._v("CommonsChunkPlugin 提取公共代码块 (v3可以用, v4 已经废弃)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const webpack = require('webpack')\nconst path = require('path')\n\nmodule.exports = {\n  entry: {\n    'pageA': './src/pageA',\n    'pageB': './src/pageB',\n    'vendor': ['lodash']      // 多入口,才有效果,  单一入口用户代码分割  懒加载\n  },\n\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: '[name].bundle.js',\n    chunkFilename: '[name].chunk.js'\n  },\n\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'common',\n      minChunks: 2,\n      chunks: ['pageA', 'pageB']\n    }),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['vendor', 'manifest'],\n      minChunks: Infinity\n    }),\n\n  ]\n}\n")])])]),n("h2",{attrs:{id:"懒加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[e._v("#")]),e._v(" 懒加载")]),e._v(" "),n("p",[e._v("import(")]),e._v(" "),n("p",[e._v("/* webpackChunkName: async-chunk-name */")]),e._v(" "),n("p",[e._v("/* webpackMode: lazy */")]),e._v(" "),n("p",[e._v("modulename\n)")]),e._v(" "),n("p",[e._v("通过注释的方式, 来告诉webpack 一些额外的信息")]),e._v(" "),n("h2",{attrs:{id:"处理css"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理css"}},[e._v("#")]),e._v(" 处理css")]),e._v(" "),n("p",[e._v("引入")]),e._v(" "),n("p",[e._v("css modules")]),e._v(" "),n("p",[e._v("配置 less/sass")]),e._v(" "),n("p",[e._v("提取 css 代码")]),e._v(" "),n("p",[e._v("style-loader     //创建样式到你的 html 标签中")]),e._v(" "),n("p",[e._v("css-loader       // 让你可以 import css 文件 到你的js中")]),e._v(" "),n("h2",{attrs:{id:"安装-webpack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装-webpack"}},[e._v("#")]),e._v(" 安装 webpack")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i -D webpack webpack-cli\n")])])]),n("p",[n("strong",[e._v("安装指定版本")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm info webpack    //查看webpack的历史发布信息\n\nnpm install webpack@x.xx  webpack-cli -D    //安装指定版本\n")])])]),n("h4",{attrs:{id:"运行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行"}},[e._v("#")]),e._v(" 运行")]),e._v(" "),n("p",[e._v("在项目根目下运行")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> webpack -V            // 这个, 要全局安装,才能找到这个命令\n> npx webpack        // npx 是npm 提供的一个工具, 它会在当前根目录下的node_module 查找webpack 运行\n")])])]),n("ul",[n("li",[e._v("webpack 支持零配置,运行上述命令")]),e._v(" "),n("li",[e._v("默认以scr/index.js为入口文件")]),e._v(" "),n("li",[e._v("默认dist/main.js为打包后的文件")])]),e._v(" "),n("h4",{attrs:{id:"配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),n("p",[e._v("默认配置文件是 webpack.config.js, 运行webpack会自动加载它.\n如果使用它的名字,则需要指定配置文件名")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npx webpack     // 执行命令后会自己加载黑夜的配置文件,并使用执行\n\nnpx webpack --config webpackcofnig.js  //通过 --config 配置指定配置文件 webpackcofnig.js\n")])])]),n("p",[e._v("配置文件是common.js规范")]),e._v(" "),n("p",[e._v("webpack.config.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const path = require("path")\n\nmodule.exports = {\n  mode: "development",    //development  production\n  // 入口文件配置 string | array | object\n  entry: {\n    index:  "./src/index.js"\n  },\n\n  //出口\n  output: {\n    path: path.resolve(__dirname, "dist"),  // 必须是绝对路径\n    filename: "[name].js"     //[name]  占位符,原来文件叫什么名就叫什么名, 即入口要用object的形式, name 就是对应入口文件的key \n    //publicPath: "https:/www.cdn.com"  // 打包后的文件 以它为前缀,为打包后的文件加路径\n  }\n}\n')])])]),n("h4",{attrs:{id:"在package-json运行-脚本命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在package-json运行-脚本命令"}},[e._v("#")]),e._v(" 在package.json运行  脚本命令")]),e._v(" "),n("p",[e._v("在package.json里的scripts里指定")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"scripts": {\n  "dev": "webpack"\n}\n')])])]),n("p",[e._v("然后就可以通过npm run dev 运行了")]),e._v(" "),n("h4",{attrs:{id:"loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[e._v("#")]),e._v(" loader")]),e._v(" "),n("p",[e._v("模块转换器, 用于把模块原内容按照需求转换成新的内容")]),e._v(" "),n("p",[e._v("webpack是模块打包工具, 而模块不仅仅是js, 还可以是css 图片或者其它格式")]),e._v(" "),n("p",[e._v("webpack默认只知道如何处理js模块, 其它格式的模块处理,就需要loader了")]),e._v(" "),n("h4",{attrs:{id:"moudle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#moudle"}},[e._v("#")]),e._v(" moudle")]),e._v(" "),n("p",[e._v("一切皆模块, 一个模块对应一个文件, webpack会从配置的entry开始递归找出所有依赖的模块")]),e._v(" "),n("h5",{attrs:{id:"file-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#file-loader"}},[e._v("#")]),e._v(" file-loader")]),e._v(" "),n("p",[e._v("把打包入口中识别的资源模块,移到到输出目录, 并返回一个地址名称")]),e._v(" "),n("p",[e._v("当我们需要模块,仅是从源代码挪移到打包目录,就可以用file-loader来处理")]),e._v(" "),n("p",[e._v("txt, svg, csv, excel, 图片资源等等")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(' module: {\n    rules: [\n      {\n        test: /\\.(png|jpe?g|gif)$/,\n        use: {\n          loader: "file-loader",\n          options: {\n            name: "[name]_[hash].[ext]",   // [name] 原文件名, [ext]原后缀 [hash]当前打包的版本号, 解决缓存,让用户可以第一时间更新内容\n            outputPath: "imgs/"\n          }\n        }\n      }\n    ]\n  }\n')])])]),n("h5",{attrs:{id:"url-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#url-loader"}},[e._v("#")]),e._v(" url-loader")]),e._v(" "),n("p",[e._v("可以处理 file-loader的所有事情,但遇到jpg格式, 会把图片转换成base64格式字符串")]),e._v(" "),n("p",[e._v("并打包到js里, 适合小体积图片, 不合适大图片")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('module: {\n    rules: [\n      {\n        test: /\\.(png|jpe?g|gif)$/,\n        use: {\n          loader: "url-loader",\n          options: {\n            name: "[name]_[hash].[ext]",   // [name] 原文件名, [ext]原后缀 [hash]当前打包的版本号, 解决缓存,让用户可以第一时间更新内容\n            outputPath: "imgs/",\n            limit: 2048\n          }\n        }\n      }\n    ]\n  }\n')])])]),n("h5",{attrs:{id:"style-loader-css-laoder"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#style-loader-css-laoder"}},[e._v("#")]),e._v(" style-loader css-laoder")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  test: /\\.css$/,\n  use: ["style-loader", "css-loader"]  //这两个laoder是有先后顺序的, 从后向前执行的,先 css-loader处理,再style-loader处理\n  // 先用css-loader 识别是css进行处理，然后用style-loader把样式插入到html <style>...</style>\n  \n}\n')])])]),n("h5",{attrs:{id:"sass-loader-node-sass"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sass-loader-node-sass"}},[e._v("#")]),e._v(" sass-loader node-sass")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('      {\n        test: /\\.scss$/,\n        use: ["style-loader", "css-loader", "sass-loader"]  //这三个laoder是有先后顺序的, 从后向前执行的,先sass-loader处理, css-loader再处理,再style-loader最后处理\n        \n      }\n')])])]),n("h4",{attrs:{id:"postcss-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#postcss-loader"}},[e._v("#")]),e._v(" postcss-loader")]),e._v(" "),n("p",[e._v("样式自动添加前缀, 它还需要再安装一个 autoprefixer  "),n("code",[e._v("npm i autoprefixer -D")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n  test: /\\.scss$/,\n  use: [\n      "style-loader",\n        "css-loader", \n        { \n          loader: "postcss-loader",\n          options: {\n            plugins: [ require("autoprefixer")]\n          }\n        },\n        "sass-loader"]  \n        //这三个laoder是有先后顺序的, 从后向前执行的,先sass-loader处理, css-loader再处理,再 .\n        //style-loader最后处理, autoprefixer 可以写配置的方式引入\n  \n\n}\n')])])]),n("h4",{attrs:{id:"plugins-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugins-2"}},[e._v("#")]),e._v(" plugins")]),e._v(" "),n("p",[n("strong",[e._v("module是webpack处理不认识的文件用的")]),e._v(" "),n("strong",[e._v("plugins是webpack处理过程中增加功能用的")]),e._v("\nwebpack 带s 的字段 是用数组的形式")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('plugins: [\n  new htmlWebpackPlugin({\n    title: "我是首页",\n    template: "./index.html",\n    //inject: true | \'head\' | \'body\' | false  注入所有的资源到特定的模板\n    // true 或 body 插到body底, head 就插到 head元素中\n    filename: "index.html"     //可以起名, 默认是 index.html\n  })\n\n  // options 通过传参进去{}\n]\n')])])]),n("p",[e._v('htmlWebpackPlugin 支持 ejs 模板语法, 上面的title 要到 template: "./index.html",这样写')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<title><%= htmlWebpackPlugin.options.title %></title>\n")])])]),n("h5",{attrs:{id:"配置多个入口文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置多个入口文件"}},[e._v("#")]),e._v(" 配置多个入口文件")]),e._v(" "),n("p",[e._v("初步配置多入口文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const path = require("path")\nconst htmlWebpackPlugin = require("html-webpack-plugin")\n\n\nmodule.exports = {\n  mode: "development",\n  // 入口文件配置 string | array | object\n  entry: { \n      index: "./src/index.js",\n      list: "./src/list.js",\n      detail: "./src/detail.js",\n    },\n  //出口\n  output: {\n    path: path.resolve(__dirname, "dist"),\n    filename: "[name].js"       //[name]  占位符,原来文件叫什么名就叫什么名\n                                // 入口,要用 object name是其key\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpe?g|gif)$/,\n        use: {\n          loader: "url-loader",\n          options: {\n            name: "[name]_[hash].[ext]",   // [name] 原文件名, [ext]原后缀 [hash]当前打包的版本号, 解决缓存,让用户可以第一时间更新内容\n            outputPath: "imgs/",\n            limit: 2048\n          }\n        }\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n            "style-loader",\n             "css-loader", \n             { \n               loader: "postcss-loader",\n               options: {\n                 plugins: [ require("autoprefixer")]\n               }\n              },\n             "sass-loader"]  \n             //这三个laoder是有先后顺序的, 从后向前执行的,先sass-loader处理, css-loader再处理,再style-loader最后处理\n        \n      }\n    ]\n  },\n  plugins: [\n    new htmlWebpackPlugin({\n      title: "我是首页",\n      template: "./index.html",\n      filename: "index.html",   \n      chunks: ["index"]       // chunks 打包后的文件   这样配置,就 index.html 下只引入index.js\n    }),\n    new htmlWebpackPlugin({\n      title: "我list",\n      template: "./index.html",\n      filename: "list.html",\n      chunks: ["list"]       // chunks 打包后的文件   这样配置,就 list.html 下只引入list.js\n    }),\n    new htmlWebpackPlugin({\n      title: "我是detail",\n      template: "./index.html",\n      filename: "detail.html",\n      chunks: ["detail"]     // chunks 打包后的文件   这样配置,就 detail.html 下只引入detail.js\n    }),\n  ]\n\n}\n')])])]),n("h5",{attrs:{id:"clean-webpack-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clean-webpack-plugin"}},[e._v("#")]),e._v(" clean-webpack-plugin")]),e._v(" "),n("p",[e._v("打包时删除旧的文件, 默认是dist目录, 其它路径要自己配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const {CleanWebpackPlugin} = require("clean-webpack-plugin")\n\nplugins: [\n    new CleanWebpackPlugin()\n]\n\n')])])]),n("h5",{attrs:{id:"min-css-extract-plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#min-css-extract-plugin"}},[e._v("#")]),e._v(" min-css-extract-plugin")]),e._v(" "),n("p",[e._v("把css代码抽出来成为单独的文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const MiniCssExtractPlugin  = require("mini-css-extract-plugin")\n\n//module.rulses \n      {\n        test: /\\.scss$/,\n        use: [\n            MiniCssExtractPlugin.loader,\n             "css-loader", \n             { \n               loader: "postcss-loader",\n               options: {\n                 plugins: [ require("autoprefixer")]\n               }\n              },\n             "sass-loader"]  \n             //这三个laoder是有先后顺序的, 从后向前执行的,先sass-loader处理, css-loader再处理,再style-loader最后处理\n        \n      }\n//plugins\nplugins: [\n    new MiniCssExtractPlugin({\n      filename: "[name].css"\n    }),\n  ]\n\n')])])]),n("p",[e._v("多个css文件 会被 css-loader 合并为一个文件")]),e._v(" "),n("h5",{attrs:{id:"sourcemap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap"}},[e._v("#")]),e._v(" sourceMap")]),e._v(" "),n("p",[e._v("源代码与打包后的代码的映射关系")]),e._v(" "),n("p",[e._v("在dev模式中,默认开启, 关闭的话,可以在配置文件里")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('devtool: "none"   //关sourceMap \ndevtool: "cheap-module-eval-source-map", //开发环境配置\ndevtool: "cheap-module-source-map", //线上生产环境配置\n')])])]),n("h5",{attrs:{id:"webpack-dev-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#webpack-dev-server"}},[e._v("#")]),e._v(" webpack-dev-server")]),e._v(" "),n("p",[e._v("开发服务器, 开启后会发现dist目录没有了, devServer把打包后的模块不放在dist目录下,")]),e._v(" "),n("p",[e._v("而是放到内存中,从而提升速度")]),e._v(" "),n("p",[e._v("然后我们开发时,可以在package.json 配置一个script命令,")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"scripts": {\n  "server": "webpack-dev-server"\n}\n')])])]),n("p",[e._v("在webpck.config.js配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 增加一个字段\ndevServer: {\n    contentBase: "./dist",\n    open: true,\n    port: 8888, \n    proxy: {     // 开发时,可以在这里配置一下,解决跨域的问题\n      "/api": {\n        target: "http://localhost:9092",\n      }\n    }\n  }\n')])])]),n("h5",{attrs:{id:"hot-module-replacement-hmr-热模块替换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hot-module-replacement-hmr-热模块替换"}},[e._v("#")]),e._v(" hot module replacement (HMR: 热模块替换)")]),e._v(" "),n("p",[e._v("开发过程中实现局部刷新,即开启 hmr")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const webpack = require("webpack")     //先引入webpack\n\nplugins: [\n  new webpack.HotModuleReplacementPlugin()  // 在插件里引入\n],\n\ndevServer: {\n    contentBase: "./dist",\n    open: true,\n    port: 8888, \n    proxy: {     // 开发时,可以在这里配置一下,解决跨域的问题\n      "/api": {\n        target: "http://localhost:9092",\n      }\n    },\n    hot: true    // 开启 hmr\n    hotOnly: true  // 即便hmr不生效,浏览器也不自动刷新,就开启hotOnly\n  }\n\n')])])]),n("p",[e._v("各种框架需要使用社区提供的各种loader\n如: react hot loader, vue loader ...")]),e._v(" "),n("h5",{attrs:{id:"babel处理es6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#babel处理es6"}},[e._v("#")]),e._v(" babel处理ES6")]),e._v(" "),n("p",[e._v("需要安装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm i -D babel-loader @babel/core @babel/preset-env\n")])])]),n("ul",[n("li",[e._v("babel-loader 是webpack与babel的通信桥梁, @babel/preset-env负责把es6转成es5")]),e._v(" "),n("li",[e._v("@babel/preset-env里包含了es6转es5的转换规则")])]),e._v(" "),n("p",[e._v("@babel/preset-env 还不够, Promise等一些还是直接过来了, 需要借助@babel/polyfill")]),e._v(" "),n("p",[e._v("把es6的新特性都编译成es5,才能在低版本浏览器中使用")]),e._v(" "),n("p",[n("strong",[e._v("@babel/polyfill")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//安装\n>npm i -D @babel/polyfill\n\n//然后在需要使用它的地方,如index.js 第一行引入\nimport "@babel/polyfill"\n\n// 这样子,会把所有的es6编译为es5需要的代码都引入,\n// 一般,还要来一个,按需要引入,只引用需要的\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        include: path.resolve(__dirname, "./src"),\n        loader: "babel-loader",\n        options: {\n          presets: [\n            [\n              "@babel/preset-env", \n              {\n                targets: {\n                  edge: "17", \n                  firefox: "60", \n                  chrome: "67",\n                  safari: "11.1"\n                },\n                useBuiltIns: "usage",\n                corejs: 2\n              }\n            ]\n          ]\n        }\n      },\n\n\n')])])]),n("p",[e._v("一般配置可以把单独写一上 .babelrc 文件 ,(把options字段删了)")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    "presets": [\n      [\n        "@babel/preset-env", \n        {\n          "targets": {\n            "edge": "17", \n            "firefox": "60", \n            "chrome": "67",\n            "safari": "11.1"\n          },\n          "useBuiltIns": "usage",\n          "corejs": 2\n        }\n      ]\n    ]\n  }\n')])])]),n("ul",[n("li",[e._v("useBuiltIns 选项是 babel7的新功能,它告诉babel如何配置@babel/polyfill")]),e._v(" "),n("li",[e._v("它有三个数可以用")]),e._v(" "),n("li",[e._v('entry: 需要在webpack入口文件,引入imort "@babel/polyfill"一次,babel会根据你使用情况导入垫片, 没有使用的功能不会被导入')]),e._v(" "),n("li",[e._v("usage: 不需要在入口文件import, 全自动检测, 但需要安装 @babel/polyfill,这是一个试验阶段的功能")]),e._v(" "),n("li",[e._v('false: 如果入口文件 import "@babel/polyfill" 它不会排除没使用的垫片,体积会比较大, (不推荐使用)')])]),e._v(" "),n("h5",{attrs:{id:"babel-plugin-transform-runtime"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#babel-plugin-transform-runtime"}},[e._v("#")]),e._v(" @babel/plugin-transform-runtime")]),e._v(" "),n("p",[e._v("@babel/polyfill 是注入到全局变量window下, 会污染全局环境(没有贬义的意思哦),")]),e._v(" "),n("p",[e._v("适合我们开发的应用  (usage 模式的行为类@babel/plugin-trnasform-runtime,不会造成全局污染, 即它不会对Array.prototype.includes()进行polyfill)")]),e._v(" "),n("p",[e._v("@babel/plugin-trnasform-runtime 是闭包的方式, 不污染全局环境,适合开发组件库")]),e._v(" "),n("p",[e._v("工具库时使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> npm i -D @babel/plugin-transform-runtime\n> npm i -S @babel/runtime\n")])])]),n("p",[n("strong",[e._v("注意@babel/runtime安装到生产依赖,而不是开发依赖")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//rules \n\n")])])]),n("p",[e._v(".babelrc")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('{\n    "presets": [\n      [\n        "@babel/preset-env", \n        {\n          "targets": {\n            "edge": "17", \n            "firefox": "60", \n            "chrome": "67",\n            "safari": "11.1"\n          },\n          "useBuiltIns": "usage",\n          "corejs": 2\n        }\n      ]\n    ],\n    "plugins": [\n        [\n            "@babel/plugin-transform-runtime",\n            {\n                "absoluteRuntime": false,\n                "corejs": 2,\n                "helpers": true,\n                "regenerator": true,\n                "useESModule": false,\n            }\n        ]\n    ]\n  }\n')])])]),n("ul",[n("li",[e._v("presets 与 plugIns 取一种就可以了")]),e._v(" "),n("li",[e._v("presets 是polyfill (我们一般应用开发用这个)")]),e._v(" "),n("li",[e._v("pligns 是@babel/plugin-transform-runtime (库, 组件开发用这个)")])]),e._v(" "),n("h4",{attrs:{id:"tree-shaking"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking"}},[e._v("#")]),e._v(" tree shaking")]),e._v(" "),n("p",[e._v("webpack2 开始支持 tree shaking, 只支持静态引入的方式,也就是ES module的引入方式\n(没有引用的文件, 就不打包进来的功能)\nwebpack.config.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("optimization: {\n  usedExports: true\n}\n")])])]),n("p",[e._v("package.json")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"sideEffects": false     //正常对所有的模块进行tree shaking\n"sideEffects": ["*.css", "@babel/polyfill"]  //对css polyfill不进行tree shaking, 因为这两个模块一般没有引入内部资源\n')])])]),n("p",[e._v("开发模式设置后, 需要设置sedExports: true 开启 tree shaking, 打包的文件会有注释")]),e._v(" "),n("p",[e._v("提示,我们引入的文件有什么,用到什么, 但还是不会把多余代码去除")]),e._v(" "),n("p",[e._v('生产模式, 会自动帮助我们摇树,可以不用设置usedExports: true, 可以删了该字段, 同时\ndevtool 也要配置为 "cheap-module-source-map", //线上生产环境推荐配置')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import "@babel/polyfill"   //1\nimport a from \'./a\'  \nimport "./css/index"       //2\n\n像1  2  没有显式的导入什么东西(像a那样导入a), tree shaking 会把 polyfill index.css 摇掉,不打包进来, 所以需要在 package.js 里配置一下排除那些不要摇(见上面)\n')])])]),n("h4",{attrs:{id:"多环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多环境"}},[e._v("#")]),e._v(" 多环境")]),e._v(" "),n("p",[e._v("一般是在根目录 创建一个config 目录来存放不同的打包配置文件")]),e._v(" "),n("p",[e._v("一般是分为三个:")]),e._v(" "),n("ul",[n("li",[e._v("webpack.base.js")]),e._v(" "),n("li",[e._v("webpack.dev.js")]),e._v(" "),n("li",[e._v("webpack.pro.js")])]),e._v(" "),n("p",[e._v("base 配置基础的东西,dev, pro都需要的东西\ndev  配置 开发需要的东西\npro  配置 生产需要的东西")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("> npm i -D webpack-merge \n")])])]),n("p",[e._v("webpack-merge 用来合成配置\n//webpack.base.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const baseConfig = {\n\n}\nmodule.exports = baseConfig\n")])])]),n("p",[e._v("//webpack.dev.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const merge = require("webpack-merge")\nconst baseConfig = require("./webpack.base.js")\n\nconst devConfig = {\n\n}\n\nmodule.exports = merge(baseConfig,devConfig)\n\n')])])]),n("p",[e._v("//webpack.pro.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const merge = require("webpack-merge")\nconst baseConfig = require("./webpack.base.js")\n\nconst proConfig = {\n\n}\n\nmodule.exports = merge(baseConfig,proConfig)\n')])])]),n("p",[e._v("在 package.js 配置不同的命令")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"scripts": {\n  "dev": "webpack-dev-server --config ./config/webpack.dev.js",\n  "build": "webpack --config ./config/webpack.pro.js"\n}\n')])])]),n("h4",{attrs:{id:"基于环境变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基于环境变量"}},[e._v("#")]),e._v(" 基于环境变量")]),e._v(" "),n("p",[e._v("webpack.dev.js,  webpack.pro.js 就不merge, 只是导出配置,")]),e._v(" "),n("p",[e._v("然后在 webpack.base.js 根据环境变量,分别merge不同的配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = (env) => {\n  if(env && env.production) {\n    return merge(baseConfig, prodConfig)\n  } else {\n    return merge(baseConfig, devdConfig)\n\n  }\n}\n")])])]),n("p",[e._v("env从哪里来? 从package.json  脚本运行命令来")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('"scripts": {\n  "dev": "webpack-dev-server --env.production --config ./config/webpack.base.js",\n  "build": "webpack --env.production --config ./config/webpack.base.js",\n \n}\n')])])]),n("h4",{attrs:{id:"code-splitting-代码分割-拆分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#code-splitting-代码分割-拆分"}},[e._v("#")]),e._v(" code Splitting  代码分割,拆分")]),e._v(" "),n("p",[e._v("如果我们引入第三方工具库, 大小1m, 我们业务代码也 1m, 那么打包出来的大小是2m")]),e._v(" "),n("p",[e._v("这样体积大,加载时间长,")]),e._v(" "),n("p",[e._v("事实上,业务代码会变化,而第三方库存不会变的了, 因为打包在一起,业务代码变了,第三方库存")]),e._v(" "),n("p",[e._v("也跟着变了")]),e._v(" "),n("p",[e._v("因此 业务代码 与 第三方库存 拆分, 很必要")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// webapck 增加配置\noptimization: {\n  //帮助我们自动做代码分割,  一般使用这个就可以了, 第三方库多,就可以按下面那样去配置\n  splitChunks: {\n    chunks: "all",\n  }\n}\n')])])]),n("ul",[n("li",[e._v("chunks 它有三个值 同步 initial, 异步 async, all 所有模块, 不设置值,默认是async")]),e._v(" "),n("li",[e._v("minSize: 30000,  // 最小大小,默认30000, 超过就进行拆分")]),e._v(" "),n("li",[e._v("maxSize: 0,  //对模块进行二次分割时使用, 不推荐使用,")]),e._v(" "),n("li",[e._v("minChunks: 1,// 当被引用多少次时,才进行分割")]),e._v(" "),n("li",[e._v("maxAsyncRequests: 5, //最大异步请求数,默认是5, 就是页面同时异步加载的数量")]),e._v(" "),n("li",[e._v("maxInitialRequests: 3, //最大初始化请求数,入口文件同步请求,默认是3")]),e._v(" "),n("li",[e._v("atutomaticNameDelimiter: '~', //打包后文件名的 分割符号")]),e._v(" "),n("li",[e._v("name: true, //打包后的名称, 除了布尔值 , 还可以接收一个函数")]),e._v(" "),n("li",[e._v("cacheGroups:")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 当有一个模块要进行分割的时候, 它会进入下面判断, 是否属于哪一个组, \n// 然后根据该组的信息进行分割\n// 一般根据引入的第三方库多少设置, 如有jquery,可以分割出一个jquery\ncacheGroups: {   // 缓存组,上面name生成的名称,和这里有关联\n  vendors: {\n    test: /[\\\\/]node_modules[\\\\/]/,\n    name: "vendor", //要缓存的,分隔出来的chunk名称,\n    priority: -10 // 缓存组优先级,数字越大,优先级越高\n  },\n  other: {\n    chunks: "initial", // 必须三选一, initial | all | async (默认)\n    test: /react|loadash/, //正则规则验证, 如果符合就提取 chunk\n    name: "other",\n    minSize: 30000,     //最小多大,才进行分割\n    minChunks: 1,    //最少有 1 次引入\n  },\n  default: {\n    minChunks:2,\n    priority: -20,\n    reuseExistingChunk: true   //可以设置是否重用该chunk\n  }\n}\n')])])]),n("h4",{attrs:{id:"打包分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#打包分析"}},[e._v("#")]),e._v(" 打包分析")]),e._v(" "),n("p",[e._v("官网有一个分析工具参考")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('> webpack --profile --json >stats.json\n// 拿到此次打包的信息\n// 一般可在pakage.json 配置一条命令\n"scrpits" {\n  "test": "webpack --profile --json >stats.json --config ./config/webpack.pro.js"\n}\n')])])]),n("p",[e._v("然后进入分析工具的页面")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("https://github.com/webpack/analyse\n\n// 上传, stats.json 文件  生成分析的结果\n")])])]),n("p",[e._v("webpack-bundle-analyzer 这个工具, 比较高大上")]),e._v(" "),n("h4",{attrs:{id:"异步引入代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步引入代码"}},[e._v("#")]),e._v(" 异步引入代码")]),e._v(" "),n("p",[e._v("把一刚始不需要使用的代码, 写到别一个文件, 提高代码使用率,就是首先加载的都是要用到的")]),e._v(" "),n("p",[e._v("没用到的用异步的引入\n//a.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function handleClick() {\n  //do someting\n}\nexport default handleClick\n")])])]),n("p",[e._v("//index.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("document.addEventListener('click', ()=>{\n  import('./a.js').then(({default: func})=> {\n    // 需要用到 npm i -D @babel/plugin-syntax-dynamic-import\n    func()\n  })\n})\n")])])]),n("p",[e._v("异步引入, 有一个缺点需要去解决,就用户使用到该需要异步引入的代码时,需要等待引入")]),e._v(" "),n("p",[e._v("会有一个反应时间, 需要用 预加载  来解决")]),e._v(" "),n("h4",{attrs:{id:"预加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#预加载"}},[e._v("#")]),e._v(" 预加载")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("document.addEventListener('click', ()=>{\n  import(/* webpackPrefetch: true */'./a.js').then(({default: func})=> {\n    // 需要用到 npm i -D @babel/plugin-syntax-dynamic-import, 新版本不需要这个\n    func()\n  })\n})\n")])])]),n("ul",[n("li",[e._v("webpackPrefetch: true 表示, 当前主要请求都加载完毕了,当前网络空闲了,浏览器自动去请求这个资源,把它加载进来. 主chunk加载完,开始加载, 推荐使用这个.")]),e._v(" "),n("li",[e._v("webpackPreload: true , 它是和主chunk 以并行方式开始加载.Pre")])]),e._v(" "),n("p",[n("strong",[e._v("异步加载 和 预加载 一起使用,才完美")])]),e._v(" "),n("h4",{attrs:{id:"如何-编写-loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何-编写-loader"}},[e._v("#")]),e._v(" 如何 编写 loader")]),e._v(" "),n("p",[e._v("loader 就是一个函数, 声明式函数, 不能用箭头函数")]),e._v(" "),n("p",[e._v("拿到源代码,作进一步的修饰处理,再返回处理后的源码就可以了")]),e._v(" "),n("p",[e._v("//在根目录下, 新建一个文件 loaders/replaceLoader.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const loaderUtils = require("loader-utils")\n\nmodule.exports = function(source){\n    // 传参\n    // this.query   接收的是配置传递过来的options\n    // const options = loaderUtils.getOptions(this)\n\n    // 异步\n    // const callback = this.async()    callback 就是this.callback\n    // setTimeout(()=>{\n    //   callback(null, xxx)\n    //},1000)\n\n\n    // 返回值\n    return source.replace("yycu", "Kevin")\n    // 如果需要返回多信息, 可以使用this.callback\n    //this.callback(null, result) 和return 一样\n    //this.callback(\n    // err:Error|null,\n    // content: string | Buffer,\n    // sourceMap?: SourceMap,\n    // meta?: any\n    //)\n};\n\n')])])]),n("ul",[n("li",[e._v("一定要用声明式函数,不能用箭头函数, 且必须返回,(用return 或this.callback())")]),e._v(" "),n("li",[e._v("this.callback 可以返更多的信息")]),e._v(" "),n("li",[e._v("this.asycn 处理异步, 他会返回 this.callback")])]),e._v(" "),n("p",[e._v("//使用 webpack.base.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('module: {\n    rules: [\n        {\n            test: /\\.js$/,\n            use: path.join(__dirname, "./loaders/replaceLoader.js")\n        }\n    ]\n}\n\n// 传参\n{\n  test: /\\.js$/,\n  use: [\n        loader: path.join(__dirname, "./loaders/replaceLoader.js"), \n        {\n            loader: path\n            options: {\n                name: "陈生"\n            }\n        }\n      \n  ]\n}\n')])])]),n("ul",[n("li",[e._v("官方推荐 loder-utils 处理loader query")])]),e._v(" "),n("h5",{attrs:{id:"使用多个loader"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用多个loader"}},[e._v("#")]),e._v(" 使用多个loader")]),e._v(" "),n("p",[e._v("//replaceLoaderAsync.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = function(source) {\n    const options = this.query\n    const callback = this.async()\n    console.log(this.query)\n    setTimeout(() => {\n\n        callback(null, source.replace('yycu', this.query.name))\n    }, 3000);\n\n};\n\n")])])]),n("p",[e._v("//webpack.base.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('resolveLoader: {\n  modules: ["node_modules", "./loader"]\n}\nmodule:{\n  rules: [\n      {\n          test: /\\.js$/,\n          use: [\n              "replaceLoader",\n              {\n                  loader: "replaceLoaderAsync", \n                  options: {\n                      name: "陈生"\n                  }\n              }\n              \n          ]\n      }       \n  ]\n} \n')])])]),n("ul",[n("li",[e._v("resolveLoader 定义loader的查找路径, 我们引入时就不用写路径了,只写个名称")])])])}),[],!1,null,null,null);a.default=t.exports}}]);