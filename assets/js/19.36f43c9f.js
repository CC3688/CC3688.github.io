(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{344:function(t,n,e){"use strict";e.r(n);var a=e(33),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),e("h2",{attrs:{id:"安装脚手架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装脚手架"}},[t._v("#")]),t._v(" 安装脚手架")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> npm i -g @angular/cli\n")])])]),e("h2",{attrs:{id:"创建项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[t._v("#")]),t._v(" 创建项目")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> ng new 项目名\n")])])]),e("h2",{attrs:{id:"运行项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运行项目"}},[t._v("#")]),t._v(" 运行项目")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> ng serve --open\n")])])]),e("h2",{attrs:{id:"目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("|-- e2e   端对端测试\n|-- node_modules 依赖包\n|-- package.json 项目配置文件\n|-- src   写代码的\n  |-- app  组件 和 根模块\n     |-- app.module.ts  根模块\n     |-- app.components.less\n     |-- app.components.ts\n     |-- app.components.html    这三个文件是 根组件\n  |-- assets  静态资源文件\n  |-- environments 环境相关的文件\n  |-- browserslist 浏览器支持配置文件 \n  |--favicon.ico\n  |--index.html   入口文件\n  |--karma.confi.js\n  |--main.ts\n  |--polyfills.ts  填充库\n  |--styles.less  公共样式文件\n\n|--.editorconfig 编辑器配置文件\n...\n")])])]),e("h2",{attrs:{id:"创建组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建组件"}},[t._v("#")]),t._v(" 创建组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> ng g component components/news\n")])])]),e("p",[t._v("这个是在文件夹components 里创建一个 news 组件\n通过脚手架创建的组件,系统为自动在 模块帮我们引入 这个新建的组件")]),t._v(" "),e("h2",{attrs:{id:"组件-及-模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件-及-模板"}},[t._v("#")]),t._v(" 组件 及 模板")]),t._v(" "),e("p",[t._v("1 声明一个数据:  在组件(类里)声明一个属性\n2 在模版绑定数据  "+t._s(t.属性))]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("interface user {\n  name: string\n}\n// ts  类里\npublic title:string = '这是一个新闻组件'  //推荐用这种方式\nmsg=\"这样也可以\"    // 默认是public   类型会推断它是string\npublic userInfo: user = {\n  name: '张三'\n}\npublic message:string\npublic content:string = '<h2>我是h2</h2>'\npublic arr: string[] = ['aaaa', 'bbbb', 'cccc']\n// 上边是声明并赋值, 也可以声明,然后在构造函数里给属性赋值, 如果上面有赋值则会被改变\nconstructor() { \n  this.message = '我是message'\n}\n\n\n// html 模板里\n<h2>{{ title }}</h2>\n<h2>{{ msg }}</h2>\n<h2>{{ userInfo.name }}</h2>\n<div [title]=\"title\">张 三</div>    // 绑定属性,  title 会是 ts 类里的 title属性的值\n<div [innerHTML]=\"content\">        // 可以解析 html  而不是仅仅解析为文本\n</div>       \n<ul>                               // 通过 *ngFor  普通循环渲染数组, 如果元素是一个{} 可以通过 . 运算符\n  <li *ngFor=\"let item of arr\">{{ item }}</li>   // {{ item.username}}\n</ul>\n\n")])])]),e("h2",{attrs:{id:"引入图片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入图片"}},[t._v("#")]),t._v(" 引入图片")]),t._v(" "),e("p",[t._v("1 需要把图片复制到 静态资源目录 assets 目录下\n2 路径以  assets   开头")]),t._v(" "),e("p",[t._v("3 如果是远程图片,可以通过属性绑定")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//html\n<img src="assets/fj.jpeg" style="width: 100px;">\n<img [src]="picUrl" style="width: 100px;">   // picUrl 是图片的地址\n\n')])])]),e("h2",{attrs:{id:"循环数组-显示索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#循环数组-显示索引"}},[t._v("#")]),t._v(" 循环数组,显示索引")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ts\npublic arr:string[] = ['aaa', 'bbb', 'ccc']\n\n//html\n\n<ul>                                    //  0  1   2\n  <li *ngFor=\"let item of arr; let key=index\" >{{key}} -- {{item}}</li>\n</ul>\n")])])]),e("h2",{attrs:{id:"条件判断-ngif"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#条件判断-ngif"}},[t._v("#")]),t._v(" 条件判断  ngIf")]),t._v(" "),e("p",[t._v("*ngIf        注意,系统没有 提供 ngElse")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// ts\npublic flag:boolean = false\n\n\n// html\n<div *ngIf="flag">\n  <img src="assets/fj.jpeg"  style="width: 100px;">\n</div>\n\n<div *ngIf="!flag">\n  <img src="assets/ys.jpg"  style="width: 100px;">\n</div>\n\n')])])]),e("h2",{attrs:{id:"ngswitch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ngswitch"}},[t._v("#")]),t._v(" ngSwitch")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// ts\npublic orderStatus: number = 3 // 1 已经支付   2 支付并且确认订单   3  表示已经发货   4  已经收货   5 无效\n\n\n// html\n<ul [ngSwitch]="orderStatus">\n    <li *ngSwitchCase="1">已经支付</li>\n    <li *ngSwitchCase="2">支付并且确认订单</li>\n    <li *ngSwitchCase="3">表示已经发货</li>\n    <li *ngSwitchCase="4">已经收货</li>\n    <li *ngSwitchDefault>无效</li>\n</ul>\n')])])]),e("h2",{attrs:{id:"属性-ngclass-ngstyle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性-ngclass-ngstyle"}},[t._v("#")]),t._v(" 属性 [ngClass]  [ngStyle]")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" \n//html         value 值为 真就有key的类名\n<div class=\"red\" [ngClass]=\"{'red': true, 'blue': true}\"> \n</div>\n\n\n<p [ngStyle]=\"{'color': 'red'}\">\n</p>\n\n\n")])])]),e("h2",{attrs:{id:"管道"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[t._v("#")]),t._v(" 管道")]),t._v(" "),e("p",[t._v("框架内置了一些, 也可以自定义")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// ts \npubluc today: any = new Date()\n//html \n<h3>{{today|date: 'yyyy-MM-dd HH:mm:ss'}}</h3>\n")])])]),e("h2",{attrs:{id:"事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//  ts\nrun() {\n  alert(\'run...\')\n}\n\nkeyDown(e) {\n  if(e.keyCode === 13) {\n    alert(e.target.value)\n  }\n}\n\n//html    事件写在()里,   方法要带上()\n<button (click)="run()">事件</button>\n\n<input type="text" (keydown)="keyDown($event)">\n')])])]),e("h2",{attrs:{id:"双向数据绑定-只是针对表单"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#双向数据绑定-只是针对表单"}},[t._v("#")]),t._v(" 双向数据绑定   (只是针对表单)")]),t._v(" "),e("p",[t._v("需要先在 app.moudle.ts 引入:\nimport { FormsModule } from '@angular/forms'")]),t._v(" "),e("p",[t._v("@NgModule({\n...\nimports: [\nBrowserModule,\nFormsModule    // 在这里声明\n],\n...\n})")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// ts\npublic keyword:string\n\n//html\n<input type="text" [(ngModel)]="keyword">\n<p>{{ keyword }}</p>\n')])])]),e("h2",{attrs:{id:"服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务"}},[t._v("#")]),t._v(" 服务")]),t._v(" "),e("p",[t._v("组件与组件,没办法调用彼此的方法, 此时需要把方法放到 服务里面, 才能让不同组件调用,")]),t._v(" "),e("p",[t._v("组件使用服务时, 需要先引入该服务")]),t._v(" "),e("p",[t._v("注意,服务里面没法调用组件里的方法")]),t._v(" "),e("p",[t._v("服务与服务之前是可以互调方法")]),t._v(" "),e("p",[t._v("组件与组件 可以传值")]),t._v(" "),e("p",[t._v("1, 创建服务")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(">ng g service my-new-service         // 不带目录\n>ng g service services/storage       // 在services目录下创建服务\n")])])]),e("p",[t._v("2, 根模块里引入,并配置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { StorageService } from './services/storage.service'\n\n@NgModule({\n  ...\n  providers: [\n    StorageService\n  ],\n  ...\n})\n\n")])])]),e("p",[t._v("3, 组件里使用")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 1 引入服务\nimport { StorageService } from '../../services/storage.service'\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.less']\n})\nexport class FormComponent implements OnInit {\n  \n  //在构造函数这里     你起的名字  上面引入的服务[]\n  constructor(public storage: StorageService) { \n   let s =  this.storage.get()\n   console.log(s)\n  }\n}\n\n")])])]),e("h2",{attrs:{id:"操作dom-和-动画"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#操作dom-和-动画"}},[t._v("#")]),t._v(" 操作DOM 和 动画")]),t._v(" "),e("p",[t._v("注意, 需要在视图加载完成以后, 才能获取到dom\n建议在 ngAfterViewInit  勾子里进行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("...\n  //须先引入\n  ngAfterViewInit() {\n    // 建议把DOM操作放在这个里面\n  }\n...\n")])])]),e("p",[t._v("使用VeiwChild 获取节点,")]),t._v(" "),e("p",[t._v("当然也是获取一个angular组件实例, 需要先给 组件起名  #开头")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// html 注意,这里是 用 #myBox   要用 # 开头\n<div #myBox>\n   我是一个dom 节点\n</div>\n\n// ts\nimport { Component, OnInit, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'app-news',\n  templateUrl: './news.component.html',\n  styleUrls: ['./news.component.less']\n})\nexport class NewsComponent implements OnInit {\n\n  @ViewChild('myBox') myBox: any\n  @ViewChild('名子')  变量/属性: any    如果变量为 header\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    console.log(this.myBox)\n    this.myBox.nativeElement.sytle.width = '100px'\n\n    // 调用子组件里面的方法\n    this.header.run()\n  }\n\n}\n\n\n")])])]),e("h2",{attrs:{id:"组件间通讯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件间通讯"}},[t._v("#")]),t._v(" 组件间通讯")]),t._v(" "),e("p",[e("strong",[t._v("父组件给子组件传值")]),t._v("\n1 子组件可以获取父组件的数据,  方法也可以传, 注意传方法时不要执行, 即方法名不加()号\n2 子组件可以执行父组件的方法")]),t._v(" "),e("p",[t._v("可以在父组件 传个 this  等于整个父组件都传进去")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//父组件调用 子组件的时候传入数据, [msg]是子组件的接上名字,  "msg" 父组件的属性名字 \n//      自定义属性\n<app-son [msg]="msg" [run]="run"></app-son>\n\n//在子组件引入Input 模块\n//在类里引入\nimport { Component, OnInit, Input } from \'@angular/core\';\n ...\n @Input() msg: string\n @Input() run: any\n\n getParentRun() {\n   this.run()\n }\n ...\n\n// 在子组件html使用\n<p>{{msg}}</p>\n')])])]),e("p",[e("strong",[t._v("子组件给父组件传值")]),t._v("\n1 父组件可以获取子组件的数据\n2 父组件可以获取子组件的方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//给子组件起名字\n<app-header #header ></app-header>\n\n//父组件通过 ViewChild 引用子组件\n\nimport { Component, OnInit, ViewChild } from '@angular/core';\n\n...\n  // 子组件赋值给  header 属性,  可以通过 this.header 使用子组件\n  @ViewChild('header') header: any\n\n  getSonMsg() {\n    alert(this.header.sonMsg)\n  }\n\n  getSonRun() {\n    this.header.sonRun()\n  }\n\n...\n")])])]),e("p",[t._v("子组件通过 @Output 触发父组件的方法\n1, 子组件引入Output  和 EventEmitter\n2, 子组件中实例化 EventEmitter")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core'\n\n@output() private outer = new EventEmitter<string>()\n\nsedParent() {\n  this.outer.emit('msg from child)\n}\n")])])]),e("p",[t._v("3 父组件调用子组件的时候, 定义接收事件, outer就是子组件的EventEmitter 对象 outer")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 在父组件里html\n        //必须要上面的outer保持一致\n<app-son (outer)="runParent()">\n')])])]),e("p",[e("strong",[t._v("非父子组件")]),t._v("\n1 组件之间传值\n2 共亨方法")]),t._v(" "),e("h2",{attrs:{id:"angular-生命周期函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#angular-生命周期函数"}},[t._v("#")]),t._v(" angular 生命周期函数")]),t._v(" "),e("p",[t._v("生命周期函 通俗讲就是组件创建,组件更新, 组件销毁的时候会触发的一系列方法")]),t._v(" "),e("p",[t._v("当 angular使用构造函数新建一个组件或指令后, 就会按下面的顺序在特定时刻调用这些生命周期钩子方法")]),t._v(" "),e("p",[t._v("以下这四个比较重要,常用")]),t._v(" "),e("ul",[e("li",[t._v("constructor  构造函数,非生命周期")]),t._v(" "),e("li",[t._v("ngOninit()")]),t._v(" "),e("li",[t._v("ngAfterViewInit()")]),t._v(" "),e("li",[t._v("ngOnDestroy()")])]),t._v(" "),e("h2",{attrs:{id:"rxjs-异步数据流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rxjs-异步数据流"}},[t._v("#")]),t._v(" Rxjs 异步数据流")]),t._v(" "),e("p",[t._v("可以用同步编程的方式处理异步数据,和promise相似,但功能更强大")]),t._v(" "),e("p",[t._v("最常用是Observable 和 fromeEvent")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { Observable }from 'rxjs'\n\nlet stream = new Observable(observer => {\n  setTimeout(()=>{\n    observer.next('observable timeout')\n  }, 2000)\n})\n\nstream.subscribe(value => console.log(value))\n\n//在服务写的\nimport { Observable }from 'rxjs'\n\n//类里\n...\n  getRxjsData() {\n    return new Obserable(observer=>{\n      setTimeout(()=>{\n        var username='yycu'\n        observer.next(username)  //成功\n        // observer.error(username)  失败\n      }, 3000)\n    })\n  }\n...\n\n//使用服务的组件里使用 \n\n  getData() {\n    var rxjsData = this.request.getRxjsData()\n\n    rxjsData.subscribe((data)=>{\n      console.log(data)\n    })\n\n    // 过一秒以后撤回刚才的操作, promise无法这样做\n    var d = rxjsData.subscribe(data=>{\n\n    })\n\n    setTimeout(()=>{\n      d.unsubscribe()  //取消订阅 \n    }, 1000)\n  }\n\n")])])]),e("h2",{attrs:{id:"请求数据模块-httpclientmodule"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求数据模块-httpclientmodule"}},[t._v("#")]),t._v(" 请求数据模块 HttpClientModule")]),t._v(" "),e("h5",{attrs:{id:"get"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" get")]),t._v(" "),e("p",[t._v("1 在 app.module.ts 中引入 HttpClientModule")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { HttpClientModule } from '@angular/common/http'\n\nimports: [\n  BrowserModule,\n  HttpClientModule\n]\n")])])]),e("p",[t._v("2 在组件中使用,")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 当做一个服务 \nimport { HttpClient } from '@angular/common/http'\n\n...\n\n  constructor(public http:HttpClient) {\n\n  }\n\n  getData() {\n\n    let api='xxxxxxxx'\n\n    this.http.get(api).subscribe((response)=> {\n      console.log(response)\n    })\n  }\n...\n\n")])])]),e("h4",{attrs:{id:"post"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" post")]),t._v(" "),e("p",[t._v("1 在app.module.ts 中引入 HttpClientModule 并注入")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { HttpClientModule } from '@angular/common/http'\n\n")])])]),e("p",[t._v("2 在用到的地方引入 HttpClient  HttpHeaders 并在构造函数声明 HttpClient")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { HttpClient, HttpHeaders } from 'angular/common/http'\n\n...\nconstructor(public http:HttpClient){\n\n}\n\ngetData() {\n  const httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  }\n  var api = 'xxxx'\n  this.http.post(api, {username: 'yycu'}, httpOptions).subscribe(response=>{\n    console.log(response)\n  })\n}\n...\n")])])]),e("h4",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" jsonp")]),t._v(" "),e("p",[t._v("1 在app.module.ts 中引入 HttpClientModule HttpClientJsonpModule 并注入")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { HttpClientModule, HttpClientJsonpModule } from '@angular/common/http'\n\nimports [\n  BrowserModule,\n  HttpClientModule,\n  HttpClientJsonpModule\n]\n\n")])])]),e("p",[t._v("2 在组件中引入")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//jsonp 请求,  服务器必须支持\nimport { HttpClient } from 'angular/common/http'\n\n...\nconstructor(public http:HttpClient){\n\n}\n\ngetData() {\n  \n  let api = 'xxxx'\n  this.http.jsonp(api, 'callback/cb').subscribe((response)=>{\n    console.log(response)\n  })\n}\n")])])]),e("h2",{attrs:{id:"使用第三方请求数据方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用第三方请求数据方法"}},[t._v("#")]),t._v(" 使用第三方请求数据方法")]),t._v(" "),e("p",[t._v("1 安装")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> npm i -S axios\n")])])]),e("p",[t._v("2 引入  (在服务, 封装成服务)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 在服务引入\nimport { Injectable } from '@angular/core';\nimport { axios } from 'axios';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpserviceService {\n  constructor() {}\n\n  axiosGet() {\n\n  }\n}\n\n")])])]),e("p",[t._v("使用就像 服务那样用就可以了")]),t._v(" "),e("h2",{attrs:{id:"路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由"}},[t._v("#")]),t._v(" 路由")]),t._v(" "),e("p",[t._v("创建项目选择,添加上路由")]),t._v(" "),e("p",[t._v("app目录下就多了下个 app-routing.module.ts,路由在此文件配置")]),t._v(" "),e("p",[t._v("app模版下有, 个 "),e("code",[t._v("<router-outlet></router-outlet>")]),t._v(" 相当于router-view")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nimport { HomeComponent } from './components/home/home.component';\nimport { ProductComponent } from './components/product/product.component';\nimport { NewsComponent } from './components/news/news.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'home', component: HomeComponent,\n  },\n  {\n    path: 'news', component: NewsComponent,\n  },\n  {\n    path: 'product', component: ProductComponent,\n  }\n  \n];\n\n\n")])])]),e("p",[t._v("在app 模板")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<header>\n  <a routerLink="/home" routerLinkActive="active">home</a>\n  <a routerLink="/news" routerLinkActive="active">news</a>\n  <a routerLink="/product" routerLinkActive="active">product</a>\n</header>\n<router-outlet></router-outlet>\n')])])]),e("p",[t._v("当前路由 会有一个 active 类名")]),t._v(" "),e("h2",{attrs:{id:"querystring-路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#querystring-路由"}},[t._v("#")]),t._v(" querystring 路由")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//html\n<a [routerLink]=\"['/newscontent']\" [queryParams]=\"{aid:key}\">{{key}} -- {{item}}</a>\n\n// 在渲染的页面 获取 \nimport { Component, OnInit } from '@angular/core';\n\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-newscontent',\n  templateUrl: './newscontent.component.html',\n  styleUrls: ['./newscontent.component.less']\n})\nexport class NewscontentComponent implements OnInit {\n\n  constructor(public route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe((data)=>{\n      console.log(data)\n    })\n  }\n\n}\n\n")])])]),e("h2",{attrs:{id:"路由-params-参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由-params-参数"}},[t._v("#")]),t._v(" 路由 params 参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 路由配置\npath: 'newscontent/:aid', component: NewscontentComponent,\n\n//html\n  <li *ngFor=\"let item of list; let key = index\">\n   \n    <a [routerLink]=\"['/newscontent', key]\">{{key}} -- {{item}}</a>\n  </li>\n\n// 组件里 获取\n// 在渲染的页面 获取 \nimport { Component, OnInit } from '@angular/core';\n\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-newscontent',\n  templateUrl: './newscontent.component.html',\n  styleUrls: ['./newscontent.component.less']\n})\nexport class NewscontentComponent implements OnInit {\n\n  constructor(public route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.params.subscribe((data)=>{\n      console.log(data)\n    })\n  }\n\n}\n\n")])])]),e("h2",{attrs:{id:"js-导航"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-导航"}},[t._v("#")]),t._v(" js 导航")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { Component, OnInit } from '@angular/core';\nimport { Router的, NavigationExtras } from '@angular/router'\n\n@Component({\n  selector: 'app-product',\n  templateUrl: './product.component.html',\n  styleUrls: ['./product.component.less']\n})\nexport class ProductComponent implements OnInit {\n\n  constructor(public router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  goProductContent() {\n                        //  params 参数写在 [] 里 第二个元素\n    this.router.navigate(['/newscontent','2222'], )\n\n                        // get 参数,  第二个参数\n    let queryParams: NavigationExtras = {\n      queryParams: {'aid': 123}\n    }\n\n    this.router.navigate(['/newscontent'], queryParams)\n  }\n}\n")])])]),e("h2",{attrs:{id:"嵌套路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#嵌套路由"}},[t._v("#")]),t._v(" 嵌套路由")])])}),[],!1,null,null,null);n.default=s.exports}}]);