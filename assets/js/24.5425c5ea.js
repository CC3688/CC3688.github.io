(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{220:function(e,t,n){"use strict";n.r(t);var a=n(28),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"ts-in-vue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ts-in-vue"}},[e._v("#")]),e._v(" TS in Vue")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://blog.logrocket.com/how-to-write-a-vue-js-app-completely-in-typescript/",target:"_blank",rel:"noopener noreferrer"}},[e._v("原文链接"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"开始"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始"}},[e._v("#")]),e._v(" 开始")]),e._v(" "),n("p",[e._v("创建应用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("vue create yourAppName\n")])])]),n("p",[e._v("然后按下面的选项进行配置")]),e._v(" "),n("p",[n("img",{attrs:{src:"/images/ts_vue_set.jpg",alt:""}})]),e._v(" "),n("p",[e._v("创建完成后,进入项目并运行")]),e._v(" "),n("h2",{attrs:{id:"类-组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类-组件"}},[e._v("#")]),e._v(" 类 组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script lang=\"ts\">\nimport { Component, Vue } from \"vue-property-decorator\";\nimport News from './News.vue'\n\n@Component({\n  name: 'componentName',\n  components: {\n    News\n  }\n})\nexport default class HelloWorld extends Vue {\n}\n")])])]),n("ul",[n("li",[e._v('需要在script 声明lang="ts", 表示我们是用ts语言写的')]),e._v(" "),n("li",[e._v("从官方推荐的第三方包 vue-property-decorator 引入相关的装饰器")]),e._v(" "),n("li",[e._v("装饰器,不传参则省略写(),  需要传则能过() 参数传递过去 参数是一个{}")]),e._v(" "),n("li",[e._v("参数一般,有name 给组件起名字, components: {}  引入入组件")])]),e._v(" "),n("h2",{attrs:{id:"data-props-计算属性-方法-watchers-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data-props-计算属性-方法-watchers-emit"}},[e._v("#")]),e._v(" data, props, 计算属性, 方法, watchers, emit")]),e._v(" "),n("h4",{attrs:{id:"data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[e._v("#")]),e._v(" data")]),e._v(" "),n("p",[e._v("类属性, 就是data")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\nimport { Component, Vue } from "vue-property-decorator";\n\n@Component({\n  name: "News"\n})\nexport default class News extends Vue {\n  public publisher = "人民教育出版社";\n  public newsList: object[] = [\n    { title: "标题一", content: "内容一" },\n    { title: "标题二", content: "内容二" },\n    { title: "标题三", content: "内容三" }\n  ];\n}\n<\/script>\n\n')])])]),n("h4",{attrs:{id:"props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[e._v("#")]),e._v(" props")]),e._v(" "),n("p",[e._v("通过 装饰器 props 来定义")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import { Component, Prop, Vue } from 'vue-property-decorator'\n\n@Component\nexport default class HelloWorld extends Vue {\n  @Prop() readonly msg!: string\n  @Prop({default: 'John doe'}) readonly name: string\n  @Prop({required: true}) readonly age: number\n  @Prop(String) readonly address: string\n  @Prop({required: false, type: String, default: 'Developer'}) readonly job: string\n}\n<\/script>\n")])])]),n("ul",[n("li",[e._v("属性的配置通过 Prop 装饰器的参数配置")]),e._v(" "),n("li",[e._v("()  必须")]),e._v(" "),n("li",[e._v("readonly 防止人为改变prop的值")])]),e._v(" "),n("h4",{attrs:{id:"计算属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算属性"}},[e._v("#")]),e._v(" 计算属性")]),e._v(" "),n("p",[e._v("计算属性通过 gettter 和 setter")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export default class HelloWorld extends Vue {\n  get fullName(): string {\n    return this.first+ ' '+ this.last\n  }\n  set fullName(newValue: string) {\n    let names = newValue.split(' ')\n    this.first = names[0]\n    this.last = names[names.length - 1]\n  }\n}\n")])])]),n("ul",[n("li",[e._v("fullName 这是计算属性")])]),e._v(" "),n("h4",{attrs:{id:"methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" methods")]),e._v(" "),n("p",[e._v("类方法,就是 methods 里的方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\nimport { Component, Vue } from "vue-property-decorator";\n\n@Component\nexport default class News extends Vue {\n  public sayHello():void {\n    alert(\'hello\')\n  }\n}\n<\/script>\n')])])]),n("h4",{attrs:{id:"watchers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watchers"}},[e._v("#")]),e._v(" watchers")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\nimport { Component, Watch, Vue } from "vue-property-decorator";\n\n@Component\nexport default class News extends Vue {\n  public publisher = "人民教育出版社";\n\n  @Watch("publisher", {\n    immediate: true,\n    deep: true\n  })\n  publisherChange(newValue: string, oldValue: string) {\n    console.log("newvalue:", newValue);\n    console.log("oldValue:", oldValue);\n  }\n}\n<\/script>\n\n')])])]),n("ul",[n("li",[e._v("需要 Watch 装饰器")]),e._v(" "),n("li",[e._v("Watch 装是要鉴别的属性或变量")]),e._v(" "),n("li",[e._v("immeditat  deep 配置在第二个参数配置,它是一个{}")]),e._v(" "),n("li",[e._v("方法名是任意起的一个方法名, 第一个参数为新值, 第二个为旧值")])]),e._v(" "),n("h4",{attrs:{id:"emit-触发自定义事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#emit-触发自定义事件"}},[e._v("#")]),e._v(" emit 触发自定义事件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Emit()\naddToCount(n: number) {\n  this.count += n\n\n  // return   xxx      //可以被监听自定义事件函数以参数的方式接收到\n}\n\n@Emit('resetData')\nresetCount() {\n  this.count = 0\n\n  // return   xxx      //可以被监听自定义事件函数以参数的方式接收到\n}\n")])])]),n("ul",[n("li",[e._v("第一种, 装饰器没有传递 参数(自定义事件名),则 默认触发与被装饰的方法同名的事件")]),e._v(" "),n("li",[e._v("默认触发是用同名事件, 驼峰命名,会被自动转为 烤串模式")]),e._v(" "),n("li",[e._v("如上例 方法名 addToCount   会默认触发 add-to-count 自定义事件")]),e._v(" "),n("li",[e._v("第二中, 有传参, 参数就是要触发的自定事,不转换命名方式了")]),e._v(" "),n("li",[e._v("如上例, 传入参数为 resetData 就触发 resetData 自定义事件")]),e._v(" "),n("li",[e._v("如上例,方法名就可以随便起名了")]),e._v(" "),n("li",[e._v("自定事件, 传参, 可以在方法体里 return xx    会被监听事件的函数的参数接收到")])]),e._v(" "),n("h2",{attrs:{id:"生命周期勾子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期勾子"}},[e._v("#")]),e._v(" 生命周期勾子")]),e._v(" "),n("p",[e._v("在类里定义 和 生命周期勾子 同名的方法就可以了")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\nimport { Component, Prop, Watch, Vue, Emit } from "vue-property-decorator";\n\n@Component({\n  name: "News"\n})\nexport default class News extends Vue {\n  constructor() {\n    super()\n    console.log("constructor")     //第一个执行\n  }\n\n  created() {\n    console.log("created");         //第二个执行\n  }\n\n  mounted() {\n    console.log("mounted");          //第三个执行\n  }\n}\n<\/script>\n')])])]),n("ul",[n("li",[e._v("勾子函数, 直接在类里定义同名的方法就可以了")]),e._v(" "),n("li",[e._v("以上的执行顺序,是它们三个的执行顺序")])]),e._v(" "),n("h2",{attrs:{id:"mixins"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[e._v("#")]),e._v(" mixins")]),e._v(" "),n("ol",[n("li",[e._v("定义mixin 文件")])]),e._v(" "),n("p",[e._v("// MyMixin.ts")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import { Component, Vue } from "vue-property-decorator";\n\n@Component\nexport default class MyMixin extends Vue {\n  public mixinName = "yycu";\n\n  created() {\n    console.log("mixinName::", this.mixinName);\n  }\n}\n\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("使用")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script lang="ts">\nimport { Component, Mixins} from "vue-property-decorator";\nimport MyMixin from "./MyMixin";\n\n@Component\nexport default class News extends Mixins(MyMixin) {\n\n}\n<\/script>\n')])])]),n("ul",[n("li",[e._v("定义时,像定义一个类组件那样做就可以了")]),e._v(" "),n("li",[e._v("使用时, 注意, 该组件,不再直接继承(extends)Vue了,")]),e._v(" "),n("li",[e._v("通过 Mixins方法, 传入需要mixix的类组件")])]),e._v(" "),n("h2",{attrs:{id:"vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[e._v("#")]),e._v(" Vuex")]),e._v(" "),n("p",[e._v("需要先安装两个第三方包")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install vuex-module-decorators -D\nnpm install vuex-class -D\n")])])]),n("p",[e._v("vuex的使用一般都是要使用它的namespaced")]),e._v(" "),n("ol",[n("li",[e._v("创建 store 目录, 并创建一个 index.ts")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import Vue from "vue";\nimport Vuex from "vuex";\nimport User from "@/store/modules/user"\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {\n    User\n  }\n});\n\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("在store目录下再创建一个 module 文件夹, 创建一个 user.ts 文件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import { VuexModule, Module, Mutation, Action } from "vuex-module-decorators";\n\n\n@Module({ namespaced: true})\nclass User extends VuexModule {\n  public name = "yycu";\n\n  get nameUpperCase():string {\n    return this.name.toLocaleUpperCase()\n  }\n\n  @Mutation\n  public setName(newName: string): void {\n    this.name = newName;\n  }\n\n  @Action({commit: "setName"})\n  public updateName(newName: string): string {\n    return newName\n  }\n}\nexport default User;\n')])])]),n("ul",[n("li",[e._v("类属性 相当于  state 里的属性")]),e._v(" "),n("li",[e._v("get  相当于 getter 里的属性")]),e._v(" "),n("li",[e._v("action 返回值, 会作为 playload 传递到mutaiton")])]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("在组件里使用")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator'\n\nimport { namespace } from 'vuex-class'\nconst user = namespace('User')\n\n@Component\nexport default class User extends Vue {\n  @user.State\n  public name!: string\n\n  @user.Getter\n  public nameUpperCase!: string\n\n  @user.Action\n  public updateName!: (newName: string) => void\n}\n<\/script>\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);