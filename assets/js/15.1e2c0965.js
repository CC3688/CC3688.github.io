<<<<<<< HEAD:assets/js/24.554c1bb4.js
(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{355:function(a,r,t){"use strict";t.r(r);var e=t(33),s=Object(e.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),t("p",[a._v("数组是极其常用的")]),a._v(" "),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),t("p",[t("strong",[a._v("映射: 一个对一个")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr1 = [18, 67, 98, 25, 17, 96] \nconst arr2 = arr1.map(i=> i >= 60)\n\n// [ 18, 67, 98, 25, 17, 96 ]\n// [ false, true, true, false, false, true ]\n// 映射, 一个对一个 弄一个新的出来,  原数组不变, 返回一个新的数组\n")])])]),t("h2",{attrs:{id:"reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[a._v("#")]),a._v(" reduce")]),a._v(" "),t("p",[t("strong",[a._v("汇总：一堆 汇总(总之是经过一系列操作最后得到) 一个")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96]\nconst res = arr1reduce((tmp, item, index)=> {\n   \n    if(index === arr.length - 1) {\n       return (tmp + item )/arr1.length\n    } else {\n\n        return tmp + item\n    }\n})\n// 汇总后, 返回一个结果\n// 原数组不变\n// 第一次进入时 tmp 是 arr[0]   item 是 arr[1]  index 是索引 1 (和item索引一致)\n// 注意要 return 一个东西, 这个东西 就是 下一次的 tmp\n")])])]),t("h2",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[a._v("#")]),a._v(" filter")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96] \nconst res = arr.filter((value,key,arr)=> {\n    \n    return v > 60\n})\n\n// 回调函数有三个参数, 数组元素, 该元素的索引, 该数组   一般就用一个参数(第一个)\n// 它必须 返回 布尔值, 当为真时, 该元素被保存到res中, 为假不保存\n// 返回一个新的数组, 不改变原数\n")])])]),t("h2",{attrs:{id:"foreach-遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach-遍历"}},[a._v("#")]),a._v(" forEach 遍历")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96] \n\nconst res = arr.forEach((v,k,a)=> {\n    console.log(v, k, a)\n    \n})\n\n// 回调函数有三个参数, 数组元素, 该元素的索引, 该数组   一般就用一个参数(第一个)\n// 内部无法使用break continue  即 遍历 无法终止 或 跳过\n// 没有返回值 res 为 undefined   arr不变\n")])])]),t("h2",{attrs:{id:"array-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[a._v("#")]),a._v(" Array.from")]),a._v(" "),t("p",[t("strong",[a._v("把类数据, 转变为真数组,才可以使用数据的方法")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);
||||||| merged common ancestors:assets/js/15.7129a64d.js
(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{341:function(a,r,t){"use strict";t.r(r);var e=t(33),s=Object(e.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),t("p",[a._v("数组是极其常用的")]),a._v(" "),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),t("p",[t("strong",[a._v("映射: 一个对一个")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr1 = [18, 67, 98, 25, 17, 96] \nconst arr2 = arr1.map(i=> i >= 60)\n\n// [ 18, 67, 98, 25, 17, 96 ]\n// [ false, true, true, false, false, true ]\n// 映射, 一个对一个 弄一个新的出来,  原数组不变, 返回一个新的数组\n")])])]),t("h2",{attrs:{id:"reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[a._v("#")]),a._v(" reduce")]),a._v(" "),t("p",[t("strong",[a._v("汇总：一堆 汇总(总之是经过一系列操作最后得到) 一个")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96]\nconst res = arr1reduce((tmp, item, index)=> {\n   \n    if(index === arr.length - 1) {\n       return (tmp + item )/arr1.length\n    } else {\n\n        return tmp + item\n    }\n})\n// 汇总后, 返回一个结果\n// 原数组不变\n// 第一次进入时 tmp 是 arr[0]   item 是 arr[1]  index 是索引 1 (和item索引一致)\n// 注意要 return 一个东西, 这个东西 就是 下一次的 tmp\n")])])]),t("h2",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[a._v("#")]),a._v(" filter")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96] \nconst res = arr.filter((value,key,arr)=> {\n    \n    return v > 60\n})\n\n// 回调函数有三个参数, 数组元素, 该元素的索引, 该数组   一般就用一个参数(第一个)\n// 它必须 返回 布尔值, 当为真时, 该元素被保存到res中, 为假不保存\n// 返回一个新的数组, 不改变原数\n")])])]),t("h2",{attrs:{id:"foreach-遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach-遍历"}},[a._v("#")]),a._v(" forEach 遍历")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96] \n\nconst res = arr.forEach((v,k,a)=> {\n    console.log(v, k, a)\n    \n})\n\n// 回调函数有三个参数, 数组元素, 该元素的索引, 该数组   一般就用一个参数(第一个)\n// 内部无法使用break continue  即 遍历 无法终止 或 跳过\n// 没有返回值 res 为 undefined   arr不变\n")])])]),t("h2",{attrs:{id:"array-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[a._v("#")]),a._v(" Array.from")]),a._v(" "),t("p",[t("strong",[a._v("把类数据, 转变为真数组,才可以使用数据的方法")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);
=======
(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{213:function(a,r,t){"use strict";t.r(r);var e=t(28),s=Object(e.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),t("p",[a._v("数组是极其常用的")]),a._v(" "),t("h2",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),t("p",[t("strong",[a._v("映射: 一个对一个")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr1 = [18, 67, 98, 25, 17, 96] \nconst arr2 = arr1.map(i=> i >= 60)\n\n// [ 18, 67, 98, 25, 17, 96 ]\n// [ false, true, true, false, false, true ]\n// 映射, 一个对一个 弄一个新的出来,  原数组不变, 返回一个新的数组\n")])])]),t("h2",{attrs:{id:"reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[a._v("#")]),a._v(" reduce")]),a._v(" "),t("p",[t("strong",[a._v("汇总：一堆 汇总(总之是经过一系列操作最后得到) 一个")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96]\nconst res = arr1reduce((tmp, item, index)=> {\n   \n    if(index === arr.length - 1) {\n       return (tmp + item )/arr1.length\n    } else {\n\n        return tmp + item\n    }\n})\n// 汇总后, 返回一个结果\n// 原数组不变\n// 第一次进入时 tmp 是 arr[0]   item 是 arr[1]  index 是索引 1 (和item索引一致)\n// 注意要 return 一个东西, 这个东西 就是 下一次的 tmp\n")])])]),t("h2",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[a._v("#")]),a._v(" filter")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96] \nconst res = arr.filter((value,key,arr)=> {\n    \n    return v > 60\n})\n\n// 回调函数有三个参数, 数组元素, 该元素的索引, 该数组   一般就用一个参数(第一个)\n// 它必须 返回 布尔值, 当为真时, 该元素被保存到res中, 为假不保存\n// 返回一个新的数组, 不改变原数\n")])])]),t("h2",{attrs:{id:"foreach-遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach-遍历"}},[a._v("#")]),a._v(" forEach 遍历")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const arr = [18, 67, 98, 25, 17, 96] \n\nconst res = arr.forEach((v,k,a)=> {\n    console.log(v, k, a)\n    \n})\n\n// 回调函数有三个参数, 数组元素, 该元素的索引, 该数组   一般就用一个参数(第一个)\n// 内部无法使用break continue  即 遍历 无法终止 或 跳过\n// 没有返回值 res 为 undefined   arr不变\n")])])]),t("h2",{attrs:{id:"array-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-from"}},[a._v("#")]),a._v(" Array.from")]),a._v(" "),t("p",[t("strong",[a._v("把类数据, 转变为真数组,才可以使用数据的方法")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\n")])])])])}),[],!1,null,null,null);r.default=s.exports}}]);
>>>>>>> c0d22d30cfc6dc6a6aad8cfe73e4a485e87d537c:assets/js/15.1e2c0965.js
