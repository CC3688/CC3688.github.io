(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{336:function(e,n,t){"use strict";t.r(n);var a=t(33),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" webpack")]),e._v(" "),t("h2",{attrs:{id:"js模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js模块化"}},[e._v("#")]),e._v(" JS模块化")]),e._v(" "),t("h3",{attrs:{id:"命名空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[e._v("#")]),e._v(" 命名空间")]),e._v(" "),t("p",[e._v("库名.类别名.方法名")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const NameSpace = {}   // 一个命名空间\n\n//如果被定义就用原来的,如果没有就用 {} 避免被重复覆盖\nNameSpace.type = NameSpace.type || {}      // type 命名空间\n\nNameSpace.type.method = function() {     // type 命名空间的 方法\n\n}\n")])])]),t("p",[e._v("不足: 名字长, 使用需要 点点点   (object . 语法)")]),e._v(" "),t("h3",{attrs:{id:"commonjs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[e._v("#")]),e._v(" commonjs")]),e._v(" "),t("p",[e._v("一个文件为一个模块")]),e._v(" "),t("p",[e._v("通过 module.exports 暴露模块接口")]),e._v(" "),t("p",[e._v("通过 require 引入模块")]),e._v(" "),t("p",[e._v("同步执行")]),e._v(" "),t("h3",{attrs:{id:"amd-cmd-umd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amd-cmd-umd"}},[e._v("#")]),e._v(" AMD/CMD/UMD")]),e._v(" "),t("h4",{attrs:{id:"amd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amd"}},[e._v("#")]),e._v(" AMD")]),e._v(" "),t("p",[e._v("Async Module Definition")]),e._v(" "),t("p",[e._v("使用 define 定义模块")]),e._v(" "),t("p",[e._v("使用 require 加载模块")]),e._v(" "),t("p",[e._v("RequireJS (代表库)")]),e._v(" "),t("p",[e._v("依赖前置, 提前执行")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('define(\n  "alpha", //模块名 可省略\n  ["require", "exports", "beta"], //依赖\n  function(require, exports, beta) {   \n    //参数声明的模块,有没有用到,都会提前执行, 参数的模块与上面依赖声明的模块一一对应\n    exports.verb = function(){  // 模块输出\n      return beta.verb()\n    }\n  }\n)\n')])])]),t("h4",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[e._v("#")]),e._v(" CMD")]),e._v(" "),t("p",[e._v("common module definition")]),e._v(" "),t("p",[e._v("一个文件为一个模块")]),e._v(" "),t("p",[e._v("使用 define 来定义一个模块")]),e._v(" "),t("p",[e._v("使用 require 来加载一个模块")]),e._v(" "),t("p",[e._v("SeaJS(代表库)")]),e._v(" "),t("p",[e._v("特点, 尽可能懒执行, 这也是 和 AMD的最大不同, AMD把所有的依赖前置了,先执行了依赖的代码.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 所有模块 都通过 define 来定义\ndefine(function(require, exports, module){\n  // 通过 require 引入依赖\n  var $ = require('jquery');\n  var Spinnig = require('./spinnig);\n\n  // 通过 exports 对外提供接口\n  exports.doSometing = ...\n\n  // 或者通过 module.exports 提供整个接口\n  module.exports = ...\n\n  //exports =  ...  不能这样做, 会覆盖掉这个参数\n});\n\n")])])]),t("h4",{attrs:{id:"umd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#umd"}},[e._v("#")]),e._v(" UMD")]),e._v(" "),t("p",[e._v("universal module definition")]),e._v(" "),t("p",[e._v("通用解决方案")]),e._v(" "),t("p",[e._v("三个步奏:")]),e._v(" "),t("p",[e._v("1 判断是否支持 AMD")]),e._v(" "),t("p",[e._v("2 判断是否支持 commonJS")]),e._v(" "),t("p",[e._v("3 如果都没有  使用全局变量")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("(function(root, factory){\n\n  if(type define === 'function' && define.amd) {\n\n    define([], factory);\n\n  } else if(typeof exports === 'object') {\n\n    module.exports = factory()\n\n  } else {\n\n    root.returnExprots = factory()\n\n  }\n})(this, function(){\n\n  return {}\n})\n\n\n")])])]),t("h3",{attrs:{id:"es6-module-esm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-module-esm"}},[e._v("#")]),e._v(" ES6 module   / ESM")]),e._v(" "),t("p",[e._v("EcmaScript Module\n一个文件 一个模块\nexport 暴露\nimport 引用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 引入\nimport theDefault, { named1, named2 } from 'src/mylib'\nimport theDefault from 'src/mylib'\nimport { named1, named2 } from 'src/mylib'\n\n// 引入并重命名\nimport { named1 as myNamed1, named2 } from 'src/mylib'\n\n// 引入所有属性 到一个 object  下方可通赤 mylib.xx 使用\nimport * as mylib from 'src/mylib\n\n// 只加载模块, 不引入,   一般用来引入 css 文件\nimport 'src/mylib'\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export var myVar1 = ''\nexport let myVar2 = ''\nexport const MY_CONST = ''\n\nexport function myFunc() {}\nexport function* myGeneratorFunc() {}\nexport class MyClass {}\n\n\n// export default 只能有一个, 下面展示是示例可以有这样的导出而已\nexport default 134\n\nexport default function(x) {\n  return x\n}\n\nexport defualt x => x\n\nexportd default class {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n  }\n}\n\n// 也可以先定义 声明  export 出去\nconst MY_CONST = ''\nfunction myFunc() {}\n// 下面只是展示, 只能 导出  一个 {}   覆盖\nexport { MY_CONST, myFunc }\nexport { MY_CONST as THE_CONST, myFunc as tearFunc }\n// 引入其它模块并在此模块导出\nexport * from 'src/other_module\nexport { foo, bar } from 'src/other_module\nexport { foo as myFoo, bar } from 'src/other_module'\n")])])]),t("h2",{attrs:{id:"css-模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-模块化"}},[e._v("#")]),e._v(" CSS 模块化")]),e._v(" "),t("p",[e._v("css模块化 也就是css规范")]),e._v(" "),t("p",[e._v("BEM 是众多规范的一种")]),e._v(" "),t("p",[t("code",[e._v("块（block）、元素（element）、修饰符（modifier），由 Yandex 团队提出的一种前端 CSS 命名方法论。")])]),e._v(" "),t("p",[e._v("- 中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。")]),e._v(" "),t("p",[e._v("__ 双下划线：双下划线用来连接块和块的子元素")]),e._v(" "),t("p",[e._v("_ 单下划线：单下划线用来描述一个块或者块的子元素的一种状态")]),e._v(" "),t("p",[e._v("命名约定的模式是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".block {}\n\n.block__element {}\n\n.block--modifier {}\n")])])]),t("p",[e._v("每一个块(block)名应该有一个命名空间（前缀）")]),e._v(" "),t("ul",[t("li",[e._v("block 代表了更高级别的抽象或组件。")]),e._v(" "),t("li",[e._v("block__element 代表 .block 的后代，用于形成一个完整的 .block 的整体。")]),e._v(" "),t("li",[e._v("block--modifier 代表 .block 的不同状态或不同版本。使用两个连字符和下划线而不是一个，是为了让你自己的块可以用单个连字符来界定")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<div class="article">\n    <div class="article__body">\n        <div class="tag"></div>\n        <button class="article__button--primary"></button>\n        <button class="article__button--success"></button>\n    </div>\n</div>\n\n')])])]),t("p",[e._v("什么时候使用BEM ?")]),e._v(" "),t("ul",[t("li",[e._v("使用 BEM 的诀窍是，你要知道什么时候哪些东西是应该写成 BEM 格式的。")]),e._v(" "),t("li",[e._v("并不是每个地方都应该使用 BEM 命名方式。当需要明确关联性的模块关系时，应当使用 BEM 格式。")]),e._v(" "),t("li",[e._v("比如只是一条公共的单独的样式，就没有使用 BEM 格式的意义")])]),e._v(" "),t("p",[e._v("BEM的不足就是会让名字长, 在less可以这样, 书写还是蛮方便的")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(".article {\n    max-width: 1200px;\n    &__body {\n        padding: 20px;\n    }\n    &__button {\n        padding: 5px 8px;\n        &--primary {background: blue;}\n        &--success {background: green;}\n    }\n}\n\n")])])]),t("h2",{attrs:{id:"核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[e._v("#")]),e._v(" 核心概念")]),e._v(" "),t("h3",{attrs:{id:"entry"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entry"}},[e._v("#")]),e._v(" Entry")]),e._v(" "),t("p",[e._v("代码的入口,  也是打包的入口,  从入口进入,找依赖及找依赖的依赖. entry可以是一个入口,也可以是多个.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 三种入口的写法, 第三种比较好, 可以为打包后的文件起名字, key可以为chunk值\n// 值为 一个可以找的文件的地址就可以\nmodule.exports = {\n  entry: 'index.js'\n  entry: ['index.js', 'vendor.js']\n  entry: {\n    index: 'index.js'\n  }\n}\n")])])]),t("h3",{attrs:{id:"output"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[e._v("#")]),e._v(" Output")]),e._v(" "),t("p",[e._v("打包生成的文件 bundle")]),e._v(" "),t("p",[e._v("可以是一个或多个")]),e._v(" "),t("p",[e._v("可以自定义规则")]),e._v(" "),t("p",[e._v("配置要和entry对应")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  entry: 'index.js',\n  output: {\n    filename: 'index.mini.js'\n  }\n  entry: {\n    index: 'index.js',\n    vendor: 'vendor.js'\n  },\n  output: {    // name就是entry的key值\n    filename: '[name].min.[hash:5].js'\n  }\n}\n")])])]),t("h3",{attrs:{id:"loaders"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loaders"}},[e._v("#")]),e._v(" Loaders")]),e._v(" "),t("p",[e._v("处理文件")]),e._v(" "),t("p",[e._v("转化为模块")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,   // 正则\n        use: 'css-loader' // 使用的loader\n      }\n    ]\n  }\n}\n")])])]),t("h3",{attrs:{id:"plugins"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[e._v("#")]),e._v(" Plugins")]),e._v(" "),t("p",[e._v("参与打包整个过程")]),e._v(" "),t("p",[e._v("打包优化和压缩")]),e._v(" "),t("p",[e._v("配置编译时的变量")]),e._v(" "),t("p",[e._v("极其灵活")]),e._v(" "),t("p",[e._v("常用的Plugins:")]),e._v(" "),t("ul",[t("li",[e._v("优化相关")])]),e._v(" "),t("blockquote",[t("p",[e._v("CommonsChunkPlugin")]),e._v(" "),t("p",[e._v("UglifyjsWebpackPlugin")])]),e._v(" "),t("ul",[t("li",[e._v("功能相关")])]),e._v(" "),t("blockquote",[t("p",[e._v("ExtractTextWebpackPlugin")]),e._v(" "),t("p",[e._v("HtmlWebpackPlugin")]),e._v(" "),t("p",[e._v("HotModuleReplacementPlugin")]),e._v(" "),t("p",[e._v("CopyWebpackPlugin")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const webpack = require('webpack')\n\nmodule.exports = {\n  // 是一个数组, 可以使用多个\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin()\n  ]\n}\n\n")])])]),t("p",[t("strong",[e._v("常见名词")]),e._v("\nChunk 代码块\nBundle 一束一捆, 被打包后的代码\nModule 模块,通过loader处理后就是模块")]),e._v(" "),t("h2",{attrs:{id:"编译-es6-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译-es6-7"}},[e._v("#")]),e._v(" 编译 ES6/7")]),e._v(" "),t("p",[e._v("babel-loader (babel.io 官网   https://www.babeljs.cn/ 中文官网)")]),e._v(" "),t("p",[t("strong",[e._v("安装")])]),e._v(" "),t("p",[t("code",[e._v("npm install --save-dev babel-loader @babel/core")])]),e._v(" "),t("p",[t("strong",[e._v("babel presets")])]),e._v(" "),t("p",[e._v("babel presets 是规范的总结, 有:\nes2015"),t("br"),e._v("\nes2016"),t("br"),e._v("\nes2017"),t("br"),e._v("\nenv(常用)"),t("br"),e._v("\nbabel-preset-react\nbabel-preset-state 0-3 (未发布的总结)")]),e._v(" "),t("p",[t("strong",[e._v("安装")])]),e._v(" "),t("p",[t("code",[e._v("npm install --save-dev @babel/preset-env")])]),e._v(" "),t("p",[t("strong",[e._v("babel polyfill")])]),e._v(" "),t("p",[e._v("全局垫片 (使各种浏览器环境一致/api一致)\n会污染全局")]),e._v(" "),t("p",[e._v("为应用准备的(就是我们自己开发的应用, 不是为了开发框架,如vue 准备的)")]),e._v(" "),t("p",[t("code",[e._v("npm install --save babel-polyfill")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//使用\nimport 'babel-polyfill'\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 在webpack.config.js 里的 module 里配置\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        //use: 'babel-loader',\n        use: {\n          loader: 'babel-loader',\n          options: {\n            presets: [\n              [\n                '@babel/preset-env', \n                {\n                  targets: {\n                    browsers: ['>1%', 'last 2 versions']\n                  }\n                }\n              ]\n            ]\n          }\n        },\n        exclude: '/node_modules/'\n      }\n    ]\n  }\n")])])]),t("p",[t("strong",[e._v("babel runtime transform")])]),e._v(" "),t("p",[e._v("局部垫片")]),e._v(" "),t("p",[e._v("为开发框架准备")]),e._v(" "),t("p",[e._v("不污染全局")]),e._v(" "),t("p",[t("code",[e._v("npm install --save-dev @babel/plugin-transform-runtime")])]),e._v(" "),t("p",[t("code",[e._v("npm install --save @babel/runtime")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 使用  配置   要 创建 一个babel的配置文件   .babelrc\n{\n  "presets": [\n    [\n      "@babel/preset-env", \n      {\n        "targets": {\n          "browsers": [">1%", "last 2 versions"]\n        }\n      }\n    ]\n  ],\n  "plugins": ["@babel/transform-runtime"]\n}\n')])])]),t("h2",{attrs:{id:"编译-typescript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译-typescript"}},[e._v("#")]),e._v(" 编译 typescript")]),e._v(" "),t("p",[e._v("typscript 是微软出品的 Javascript的超集")]),e._v(" "),t("p",[t("strong",[e._v("安装")])]),e._v(" "),t("p",[t("code",[e._v("npm i -D typescript ts-loader")])]),e._v(" "),t("p",[t("code",[e._v("npm i -D typescript awesome-typescript-loader //第三方法的")])]),e._v(" "),t("p",[t("strong",[e._v("配置")]),e._v(" 文件")]),e._v(" "),t("p",[e._v('tsconfig.json\n\'\'\'\n{\n"compilerOptions": {\n"module": "commonjs",\n"target": "es5",\n"allowJs": true,\n"typeRoots": [\n"./node_modules/@types",\n"./typings/modules"\n]\n},\n"include": [\n"./src/*"\n],\n"exclude": [\n"./node_modules"\n]\n}\n\'\'\'')]),e._v(" "),t("p",[e._v("webpack.config.js")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("module.exports = {\n  mode: 'development',\n  entry: {\n    'app': './src/app.ts'\n  },\n  output: {\n    filename: '[name].bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.tsx?$/,\n        use: {\n          loader: 'ts-loader'\n        }\n      }\n    ]\n  }\n}\n")])])]),t("p",[t("strong",[e._v("声明文件")])]),e._v(" "),t("p",[t("code",[e._v("npm i -S @types/lodash")])]),e._v(" "),t("p",[t("code",[e._v("npm i -S install @types/vue")]),e._v("\n这种需要自己去 安装 需要的 类库")]),e._v(" "),t("p",[t("strong",[e._v("Typings")])]),e._v(" "),t("p",[e._v("全局安装, 可以多一个typings")]),e._v(" "),t("p",[t("code",[e._v("npm i -g typings")])]),e._v(" "),t("p",[t("code",[e._v("typings install lodash")])]),e._v(" "),t("h2",{attrs:{id:"提取公共代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提取公共代码"}},[e._v("#")]),e._v(" 提取公共代码")]),e._v(" "),t("p",[e._v("CommonsChunkPlugin 提取公共代码块 (v3可以用, v4 已经废弃)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const webpack = require('webpack')\nconst path = require('path')\n\nmodule.exports = {\n  entry: {\n    'pageA': './src/pageA',\n    'pageB': './src/pageB',\n    'vendor': ['lodash']      // 多入口,才有效果,  单一入口用户代码分割  懒加载\n  },\n\n  output: {\n    path: path.resolve(__dirname, './dist'),\n    filename: '[name].bundle.js',\n    chunkFilename: '[name].chunk.js'\n  },\n\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'common',\n      minChunks: 2,\n      chunks: ['pageA', 'pageB']\n    }),\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['vendor', 'manifest'],\n      minChunks: Infinity\n    }),\n\n  ]\n}\n")])])]),t("h2",{attrs:{id:"懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[e._v("#")]),e._v(" 懒加载")]),e._v(" "),t("p",[e._v("import(")]),e._v(" "),t("p",[e._v("/* webpackChunkName: async-chunk-name */")]),e._v(" "),t("p",[e._v("/* webpackMode: lazy */")]),e._v(" "),t("p",[e._v("modulename\n)")]),e._v(" "),t("p",[e._v("通过注释的方式, 来告诉webpack 一些额外的信息")]),e._v(" "),t("h2",{attrs:{id:"处理css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#处理css"}},[e._v("#")]),e._v(" 处理css")]),e._v(" "),t("p",[e._v("引入")]),e._v(" "),t("p",[e._v("css modules")]),e._v(" "),t("p",[e._v("配置 less/sass")]),e._v(" "),t("p",[e._v("提取 css 代码")]),e._v(" "),t("p",[e._v("style-loader     //创建样式到你的 html 标签中")]),e._v(" "),t("p",[e._v("css-loader       // 让你可以 import css 文件 到你的js中")])])}),[],!1,null,null,null);n.default=s.exports}}]);